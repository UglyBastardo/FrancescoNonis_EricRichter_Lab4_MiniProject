
lab4_LCD_Controller.elf:     file format elf32-littlenios2
lab4_LCD_Controller.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x10100244

Program Header:
    LOAD off    0x00001000 vaddr 0x10100000 paddr 0x10100000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x10100020 paddr 0x10100020 align 2**12
         filesz 0x00003160 memsz 0x00003160 flags r-x
    LOAD off    0x00004180 vaddr 0x10103180 paddr 0x10104848 align 2**12
         filesz 0x000016c8 memsz 0x000016c8 flags rw-
    LOAD off    0x00005f10 vaddr 0x10105f10 paddr 0x10105f10 align 2**12
         filesz 0x00000000 memsz 0x00000120 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  10100000  10100000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  10100020  10100020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00002ef8  10100244  10100244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000044  1010313c  1010313c  0000413c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000016c8  10103180  10104848  00004180  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000120  10105f10  10105f10  00005f10  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  10106030  10106030  00005848  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00005848  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000618  00000000  00000000  00005870  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00008471  00000000  00000000  00005e88  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002cdf  00000000  00000000  0000e2f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00002e7e  00000000  00000000  00010fd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000c3c  00000000  00000000  00013e58  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00001bf8  00000000  00000000  00014a94  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000770  00000000  00000000  0001668c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  00016dfc  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000178  00000000  00000000  00016e30  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00018c76  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  00018c79  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00018c85  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00018c86  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  00018c87  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  00018c92  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  00018c9d  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000a  00000000  00000000  00018ca8  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000082  00000000  00000000  00018cb2  2**0
                  CONTENTS, READONLY
 26 .jdi          0000596f  00000000  00000000  00018d34  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     00280540  00000000  00000000  0001e6a3  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
10100000 l    d  .entry	00000000 .entry
10100020 l    d  .exceptions	00000000 .exceptions
10100244 l    d  .text	00000000 .text
1010313c l    d  .rodata	00000000 .rodata
10103180 l    d  .rwdata	00000000 .rwdata
10105f10 l    d  .bss	00000000 .bss
10106030 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 C:/Users/franc/Desktop/epfl/MA1/embeded_system/lab4/lab4_correct_template/lab_4_project_template/lab_4_project_template/sw/nios/lab4_LCD_Controller_bsp//obj/HAL/src/crt0.o
1010028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 LCD_control.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 alt_load.c
101009ec l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
10100b54 l     F .text	00000034 alt_dev_reg
10103180 l     O .rwdata	00001060 jtag_uart_0
101041e0 l     O .rwdata	00000028 altera_hostfs
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
10100e38 l     F .text	0000020c altera_avalon_jtag_uart_irq
10101044 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_hostfs.c
101047d4 l     O .rwdata	00000009 hcinfo.2538
101047e0 l     O .rwdata	0000000a hcinfo.2551
101047ec l     O .rwdata	00000009 hcinfo.2560
101047f8 l     O .rwdata	0000000a hcinfo.2573
10104804 l     O .rwdata	0000000a hcinfo.2586
10104810 l     O .rwdata	0000000a hcinfo.2612
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
10101c2c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
10101d80 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
10101dac l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fs_reg.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
101022a0 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
101023e0 l     F .text	0000003c alt_get_errno
1010241c l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
101043b0 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
10105f28 g     O .bss	00000004 alt_instruction_exception_handler
10100ad8 g     F .text	0000007c alt_main
10105f30 g     O .bss	00000100 alt_irq
10104848 g       *ABS*	00000000 __flash_rwdata_start
1010167c g     F .text	0000011c alt_hostfs_open
1010283c g     F .text	00000024 altera_nios2_gen2_irq_init
10100000 g     F .entry	0000001c __reset
10100020 g       *ABS*	00000000 __flash_exceptions_start
10105f2c g     O .bss	00000004 errno
10105f14 g     O .bss	00000004 alt_argv
1010c7d4 g       *ABS*	00000000 _gp
10104230 g     O .rwdata	00000180 alt_fd_list
101018b4 g     F .text	00000068 alt_hostfs_seek
10102860 g     F .text	00000090 alt_find_dev
10102c90 g     F .text	00000148 memcpy
10101f4c g     F .text	00000080 alt_fs_reg
10102364 g     F .text	0000007c alt_io_redirect
1010313c g       *ABS*	00000000 __DTOR_END__
10102b2c g     F .text	0000009c alt_exception_cause_generated_bad_addr
1010123c g     F .text	0000021c altera_avalon_jtag_uart_read
10100000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
10102a9c g     F .text	00000090 alt_icache_flush
101017dc g     F .text	0000006c alt_hostfs_read
10100994 g     F .text	00000058 write_image
1010482c g     O .rwdata	00000004 alt_max_fd
101002e8 g     F .text	00000670 LCD_init
10104840 g     O .rwdata	00000004 _global_impure_ptr
10106030 g       *ABS*	00000000 __bss_end
101021b0 g     F .text	000000f0 alt_iic_isr_register
10102734 g     F .text	00000108 alt_tick
10102164 g     F .text	0000004c alt_ic_irq_enabled
10102698 g     F .text	0000009c alt_alarm_stop
10105f1c g     O .bss	00000004 alt_irq_active
10101798 g     F .text	00000044 alt_hostfs_close
101000fc g     F .exceptions	000000d4 alt_irq_handler
10104208 g     O .rwdata	00000028 alt_dev_null
10101d38 g     F .text	00000048 alt_dcache_flush_all
10104848 g       *ABS*	00000000 __ram_rwdata_end
10104824 g     O .rwdata	00000008 alt_dev_list
10103180 g       *ABS*	00000000 __ram_rodata_end
10106030 g       *ABS*	00000000 end
10100d78 g     F .text	000000c0 altera_avalon_jtag_uart_init
101001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
1010313c g       *ABS*	00000000 __CTOR_LIST__
10120000 g       *ABS*	00000000 __alt_stack_pointer
10101458 g     F .text	00000224 altera_avalon_jtag_uart_write
10102f88 g     F .text	00000180 __call_exitprocs
10100244 g     F .text	0000004c _start
10105f20 g     O .bss	00000004 _alt_tick_rate
10105f24 g     O .bss	00000004 _alt_nticks
10100bc0 g     F .text	00000054 alt_sys_init
10102e70 g     F .text	00000118 __register_exitproc
101010e4 g     F .text	00000068 altera_avalon_jtag_uart_close
10103180 g       *ABS*	00000000 __ram_rwdata_start
1010313c g       *ABS*	00000000 __ram_rodata_start
10100c14 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
101029f8 g     F .text	000000a4 alt_get_fd
10102c14 g     F .text	0000007c memcmp
10100cd4 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
10106030 g       *ABS*	00000000 __alt_stack_base
10100d24 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
101028f0 g     F .text	00000108 alt_find_file
10101de8 g     F .text	000000a4 alt_dev_llist_insert
10105f10 g       *ABS*	00000000 __bss_start
10100958 g     F .text	0000003c main
10105f18 g     O .bss	00000004 alt_envp
10100c74 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
10104830 g     O .rwdata	00000004 alt_errno
10100290 g     F .text	00000058 Delay_Ms
1010313c g       *ABS*	00000000 __CTOR_END__
1010313c g       *ABS*	00000000 __flash_rodata_start
1010313c g       *ABS*	00000000 __DTOR_LIST__
10100b88 g     F .text	00000038 alt_irq_init
10102634 g     F .text	00000064 alt_release_fd
10102bc8 g     F .text	00000014 atexit
10104844 g     O .rwdata	00000004 _impure_ptr
10105f10 g     O .bss	00000004 alt_argc
10101eec g     F .text	00000060 _do_dtors
10100020 g       .exceptions	00000000 alt_irq_entry
1010481c g     O .rwdata	00000008 alt_fs_list
10101848 g     F .text	0000006c alt_hostfs_write
10100020 g       *ABS*	00000000 __ram_exceptions_start
10102000 g     F .text	00000050 alt_ic_isr_register
10104848 g       *ABS*	00000000 _edata
10106030 g       *ABS*	00000000 _end
10100244 g       *ABS*	00000000 __ram_exceptions_end
1010114c g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
101020d8 g     F .text	0000008c alt_ic_irq_disable
10102bdc g     F .text	00000038 exit
10120000 g       *ABS*	00000000 __alt_data_end
10100020 g     F .exceptions	00000000 alt_exception
10103108 g     F .text	00000034 _exit
10101b00 g     F .text	0000012c alt_alarm_start
10102dd8 g     F .text	00000098 strlen
101024e0 g     F .text	00000154 open
10101fcc g     F .text	00000034 alt_icache_flush_all
10104834 g     O .rwdata	00000004 alt_priority_mask
10102050 g     F .text	00000088 alt_ic_irq_enable
10104838 g     O .rwdata	00000008 alt_alarm_list
10101e8c g     F .text	00000060 _do_ctors
10101c68 g     F .text	000000d0 close
10100a54 g     F .text	00000084 alt_load
1010191c g     F .text	000001e4 alt_hostfs_fstat



Disassembly of section .entry:

10100000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
10100000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
10100004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
10100008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
1010000c:	00bffd16 	blt	zero,r2,10100004 <__alt_data_end+0xfffe0004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
10100010:	00440434 	movhi	at,4112
    ori r1, r1, %lo(_start)
10100014:	08409114 	ori	at,at,580
    jmp r1
10100018:	0800683a 	jmp	at
1010001c:	00000000 	call	10000000 <__alt_mem_onchip_memory2_0-0x100000>

Disassembly of section .exceptions:

10100020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
10100020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
10100024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
10100028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
1010002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
10100030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
10100034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
10100038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
1010003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
10100040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
10100044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
10100048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
1010004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
10100050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
10100054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
10100058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
1010005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
10100060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
10100064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
10100068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
1010006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
10100070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
10100074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
10100078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
1010007c:	10000326 	beq	r2,zero,1010008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
10100080:	20000226 	beq	r4,zero,1010008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
10100084:	01000fc0 	call	101000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
10100088:	00000706 	br	101000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
1010008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
10100090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
10100094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
10100098:	01001d00 	call	101001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
1010009c:	1000021e 	bne	r2,zero,101000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
101000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
101000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
101000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
101000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
101000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
101000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
101000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
101000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
101000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
101000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
101000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
101000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
101000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
101000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
101000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
101000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
101000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
101000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
101000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
101000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
101000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
101000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
101000f8:	ef80083a 	eret

101000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
101000fc:	defff904 	addi	sp,sp,-28
10100100:	dfc00615 	stw	ra,24(sp)
10100104:	df000515 	stw	fp,20(sp)
10100108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
1010010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
10100110:	0005313a 	rdctl	r2,ipending
10100114:	e0bffe15 	stw	r2,-8(fp)

  return active;
10100118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
1010011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
10100120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
10100124:	00800044 	movi	r2,1
10100128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
1010012c:	e0fffb17 	ldw	r3,-20(fp)
10100130:	e0bffc17 	ldw	r2,-16(fp)
10100134:	1884703a 	and	r2,r3,r2
10100138:	10001426 	beq	r2,zero,1010018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
1010013c:	00840434 	movhi	r2,4112
10100140:	1097cc04 	addi	r2,r2,24368
10100144:	e0fffd17 	ldw	r3,-12(fp)
10100148:	180690fa 	slli	r3,r3,3
1010014c:	10c5883a 	add	r2,r2,r3
10100150:	10c00017 	ldw	r3,0(r2)
10100154:	00840434 	movhi	r2,4112
10100158:	1097cc04 	addi	r2,r2,24368
1010015c:	e13ffd17 	ldw	r4,-12(fp)
10100160:	200890fa 	slli	r4,r4,3
10100164:	1105883a 	add	r2,r2,r4
10100168:	10800104 	addi	r2,r2,4
1010016c:	10800017 	ldw	r2,0(r2)
10100170:	1009883a 	mov	r4,r2
10100174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
10100178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
1010017c:	0005313a 	rdctl	r2,ipending
10100180:	e0bfff15 	stw	r2,-4(fp)

  return active;
10100184:	e0bfff17 	ldw	r2,-4(fp)
10100188:	00000706 	br	101001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
1010018c:	e0bffc17 	ldw	r2,-16(fp)
10100190:	1085883a 	add	r2,r2,r2
10100194:	e0bffc15 	stw	r2,-16(fp)
      i++;
10100198:	e0bffd17 	ldw	r2,-12(fp)
1010019c:	10800044 	addi	r2,r2,1
101001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
101001a4:	003fe106 	br	1010012c <__alt_data_end+0xfffe012c>

    active = alt_irq_pending ();
101001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
101001ac:	e0bffb17 	ldw	r2,-20(fp)
101001b0:	103fdb1e 	bne	r2,zero,10100120 <__alt_data_end+0xfffe0120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
101001b4:	0001883a 	nop
}
101001b8:	0001883a 	nop
101001bc:	e037883a 	mov	sp,fp
101001c0:	dfc00117 	ldw	ra,4(sp)
101001c4:	df000017 	ldw	fp,0(sp)
101001c8:	dec00204 	addi	sp,sp,8
101001cc:	f800283a 	ret

101001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
101001d0:	defffb04 	addi	sp,sp,-20
101001d4:	dfc00415 	stw	ra,16(sp)
101001d8:	df000315 	stw	fp,12(sp)
101001dc:	df000304 	addi	fp,sp,12
101001e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
101001e4:	000531fa 	rdctl	r2,exception
101001e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
101001ec:	e0bffd17 	ldw	r2,-12(fp)
101001f0:	10801f0c 	andi	r2,r2,124
101001f4:	1004d0ba 	srli	r2,r2,2
101001f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
101001fc:	0005333a 	rdctl	r2,badaddr
10100200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
10100204:	d0a5d517 	ldw	r2,-26796(gp)
10100208:	10000726 	beq	r2,zero,10100228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
1010020c:	d0a5d517 	ldw	r2,-26796(gp)
10100210:	e0fffd17 	ldw	r3,-12(fp)
10100214:	e1bffe17 	ldw	r6,-8(fp)
10100218:	e17fff17 	ldw	r5,-4(fp)
1010021c:	1809883a 	mov	r4,r3
10100220:	103ee83a 	callr	r2
10100224:	00000206 	br	10100230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
10100228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
1010022c:	0005883a 	mov	r2,zero
}
10100230:	e037883a 	mov	sp,fp
10100234:	dfc00117 	ldw	ra,4(sp)
10100238:	df000017 	ldw	fp,0(sp)
1010023c:	dec00204 	addi	sp,sp,8
10100240:	f800283a 	ret

Disassembly of section .text:

10100244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
10100244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
10100248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
1010024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
10100250:	00bffd16 	blt	zero,r2,10100248 <__alt_data_end+0xfffe0248>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
10100254:	06c404b4 	movhi	sp,4114
    ori sp, sp, %lo(__alt_stack_pointer)
10100258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
1010025c:	06840434 	movhi	gp,4112
    ori gp, gp, %lo(_gp)
10100260:	d6b1f514 	ori	gp,gp,51156
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
10100264:	00840434 	movhi	r2,4112
    ori r2, r2, %lo(__bss_start)
10100268:	1097c414 	ori	r2,r2,24336

    movhi r3, %hi(__bss_end)
1010026c:	00c40434 	movhi	r3,4112
    ori r3, r3, %lo(__bss_end)
10100270:	18d80c14 	ori	r3,r3,24624

    beq r2, r3, 1f
10100274:	10c00326 	beq	r2,r3,10100284 <_start+0x40>

0:
    stw zero, (r2)
10100278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
1010027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
10100280:	10fffd36 	bltu	r2,r3,10100278 <__alt_data_end+0xfffe0278>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
10100284:	0100a540 	call	10100a54 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
10100288:	0100ad80 	call	10100ad8 <alt_main>

1010028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
1010028c:	003fff06 	br	1010028c <__alt_data_end+0xfffe028c>

10100290 <Delay_Ms>:
#define LCD_WR_DATA(value)	IOWR_32DIRECT(LCD_CONTROLLER_0_BASE, 0b00, value||0x0001000)

#define CLK_frequ		50000000	//50 MHz

//take input as ms
void Delay_Ms(unsigned int delta_t) {
10100290:	defffc04 	addi	sp,sp,-16
10100294:	df000315 	stw	fp,12(sp)
10100298:	df000304 	addi	fp,sp,12
1010029c:	e13fff15 	stw	r4,-4(fp)

	int nbr_iteration = delta_t*(CLK_frequ/1000);
101002a0:	e0ffff17 	ldw	r3,-4(fp)
101002a4:	00b0d414 	movui	r2,50000
101002a8:	1885383a 	mul	r2,r3,r2
101002ac:	e0bffe15 	stw	r2,-8(fp)

	for(int i = 0; i < nbr_iteration; ++i) {
101002b0:	e03ffd15 	stw	zero,-12(fp)
101002b4:	00000406 	br	101002c8 <Delay_Ms+0x38>
			__asm__("nop");
101002b8:	0001883a 	nop
//take input as ms
void Delay_Ms(unsigned int delta_t) {

	int nbr_iteration = delta_t*(CLK_frequ/1000);

	for(int i = 0; i < nbr_iteration; ++i) {
101002bc:	e0bffd17 	ldw	r2,-12(fp)
101002c0:	10800044 	addi	r2,r2,1
101002c4:	e0bffd15 	stw	r2,-12(fp)
101002c8:	e0fffd17 	ldw	r3,-12(fp)
101002cc:	e0bffe17 	ldw	r2,-8(fp)
101002d0:	18bff916 	blt	r3,r2,101002b8 <__alt_data_end+0xfffe02b8>
			__asm__("nop");
	}


}
101002d4:	0001883a 	nop
101002d8:	e037883a 	mov	sp,fp
101002dc:	df000017 	ldw	fp,0(sp)
101002e0:	dec00104 	addi	sp,sp,4
101002e4:	f800283a 	ret

101002e8 <LCD_init>:

void LCD_init() {
101002e8:	defffe04 	addi	sp,sp,-8
101002ec:	dfc00115 	stw	ra,4(sp)
101002f0:	df000015 	stw	fp,0(sp)
101002f4:	d839883a 	mov	fp,sp

	alt_u16 data1, datat2;
	alt_u16 data3, data4;

	Set_LCD_RST;
101002f8:	00c00044 	movi	r3,1
101002fc:	00840034 	movhi	r2,4096
10100300:	10820b04 	addi	r2,r2,2092
10100304:	10c00035 	stwio	r3,0(r2)
	Delay_Ms(1);
10100308:	01000044 	movi	r4,1
1010030c:	01002900 	call	10100290 <Delay_Ms>
	Clr_LCD_RST;
10100310:	0007883a 	mov	r3,zero
10100314:	00840034 	movhi	r2,4096
10100318:	10820b04 	addi	r2,r2,2092
1010031c:	10c00035 	stwio	r3,0(r2)
	Delay_Ms(10);
10100320:	01000284 	movi	r4,10
10100324:	01002900 	call	10100290 <Delay_Ms>
	Set_LCD_RST;
10100328:	00c00044 	movi	r3,1
1010032c:	00840034 	movhi	r2,4096
10100330:	10820b04 	addi	r2,r2,2092
10100334:	10c00035 	stwio	r3,0(r2)
	Delay_Ms(120);
10100338:	01001e04 	movi	r4,120
1010033c:	01002900 	call	10100290 <Delay_Ms>

	LCD_WR_REG(0x00000011);	//Exit sleep
10100340:	00c00444 	movi	r3,17
10100344:	00840034 	movhi	r2,4096
10100348:	10820804 	addi	r2,r2,2080
1010034c:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x000000CF); 		//Power Control B
10100350:	00c033c4 	movi	r3,207
10100354:	00840034 	movhi	r2,4096
10100358:	10820804 	addi	r2,r2,2080
1010035c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x00000000); // Always 0x00
10100360:	00c00044 	movi	r3,1
10100364:	00840034 	movhi	r2,4096
10100368:	10820804 	addi	r2,r2,2080
1010036c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x00000081); //
10100370:	00c00044 	movi	r3,1
10100374:	00840034 	movhi	r2,4096
10100378:	10820804 	addi	r2,r2,2080
1010037c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0X000000c0);
10100380:	00c00044 	movi	r3,1
10100384:	00840034 	movhi	r2,4096
10100388:	10820804 	addi	r2,r2,2080
1010038c:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x000000ED); // Power on sequence control
10100390:	00c03b44 	movi	r3,237
10100394:	00840034 	movhi	r2,4096
10100398:	10820804 	addi	r2,r2,2080
1010039c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x00000064); // Soft Start Keep 1 frame
101003a0:	00c00044 	movi	r3,1
101003a4:	00840034 	movhi	r2,4096
101003a8:	10820804 	addi	r2,r2,2080
101003ac:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x00000003); //
101003b0:	00c00044 	movi	r3,1
101003b4:	00840034 	movhi	r2,4096
101003b8:	10820804 	addi	r2,r2,2080
101003bc:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0X00000012);
101003c0:	00c00044 	movi	r3,1
101003c4:	00840034 	movhi	r2,4096
101003c8:	10820804 	addi	r2,r2,2080
101003cc:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0X00000081);
101003d0:	00c00044 	movi	r3,1
101003d4:	00840034 	movhi	r2,4096
101003d8:	10820804 	addi	r2,r2,2080
101003dc:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x000000E8); // Driver timing control A
101003e0:	00c03a04 	movi	r3,232
101003e4:	00840034 	movhi	r2,4096
101003e8:	10820804 	addi	r2,r2,2080
101003ec:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x00000085);
101003f0:	00c00044 	movi	r3,1
101003f4:	00840034 	movhi	r2,4096
101003f8:	10820804 	addi	r2,r2,2080
101003fc:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x00000001);
10100400:	00c00044 	movi	r3,1
10100404:	00840034 	movhi	r2,4096
10100408:	10820804 	addi	r2,r2,2080
1010040c:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x00000798);
10100410:	00c00044 	movi	r3,1
10100414:	00840034 	movhi	r2,4096
10100418:	10820804 	addi	r2,r2,2080
1010041c:	10c00035 	stwio	r3,0(r2)

	 LCD_WR_REG(0x000000CB); // Power control A
10100420:	00c032c4 	movi	r3,203
10100424:	00840034 	movhi	r2,4096
10100428:	10820804 	addi	r2,r2,2080
1010042c:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x00000039);
10100430:	00c00044 	movi	r3,1
10100434:	00840034 	movhi	r2,4096
10100438:	10820804 	addi	r2,r2,2080
1010043c:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x0000002C);
10100440:	00c00044 	movi	r3,1
10100444:	00840034 	movhi	r2,4096
10100448:	10820804 	addi	r2,r2,2080
1010044c:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x00000000);
10100450:	00c00044 	movi	r3,1
10100454:	00840034 	movhi	r2,4096
10100458:	10820804 	addi	r2,r2,2080
1010045c:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x00000034);
10100460:	00c00044 	movi	r3,1
10100464:	00840034 	movhi	r2,4096
10100468:	10820804 	addi	r2,r2,2080
1010046c:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x00000002);
10100470:	00c00044 	movi	r3,1
10100474:	00840034 	movhi	r2,4096
10100478:	10820804 	addi	r2,r2,2080
1010047c:	10c00035 	stwio	r3,0(r2)

	 LCD_WR_REG(0x000000F7); // Pump ratio control
10100480:	00c03dc4 	movi	r3,247
10100484:	00840034 	movhi	r2,4096
10100488:	10820804 	addi	r2,r2,2080
1010048c:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x00000020);
10100490:	00c00044 	movi	r3,1
10100494:	00840034 	movhi	r2,4096
10100498:	10820804 	addi	r2,r2,2080
1010049c:	10c00035 	stwio	r3,0(r2)

	 LCD_WR_REG(0x000000EA); // Driver timing control B
101004a0:	00c03a84 	movi	r3,234
101004a4:	00840034 	movhi	r2,4096
101004a8:	10820804 	addi	r2,r2,2080
101004ac:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x00000000);
101004b0:	00c00044 	movi	r3,1
101004b4:	00840034 	movhi	r2,4096
101004b8:	10820804 	addi	r2,r2,2080
101004bc:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x00000000);
101004c0:	00c00044 	movi	r3,1
101004c4:	00840034 	movhi	r2,4096
101004c8:	10820804 	addi	r2,r2,2080
101004cc:	10c00035 	stwio	r3,0(r2)

	 LCD_WR_REG(0x000000B1); // Frame Control (In Normal Mode)
101004d0:	00c02c44 	movi	r3,177
101004d4:	00840034 	movhi	r2,4096
101004d8:	10820804 	addi	r2,r2,2080
101004dc:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x00000000);
101004e0:	00c00044 	movi	r3,1
101004e4:	00840034 	movhi	r2,4096
101004e8:	10820804 	addi	r2,r2,2080
101004ec:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x0000001b);
101004f0:	00c00044 	movi	r3,1
101004f4:	00840034 	movhi	r2,4096
101004f8:	10820804 	addi	r2,r2,2080
101004fc:	10c00035 	stwio	r3,0(r2)

	 LCD_WR_REG(0x000000B6); // Display Function Control
10100500:	00c02d84 	movi	r3,182
10100504:	00840034 	movhi	r2,4096
10100508:	10820804 	addi	r2,r2,2080
1010050c:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x0000000A);
10100510:	00c00044 	movi	r3,1
10100514:	00840034 	movhi	r2,4096
10100518:	10820804 	addi	r2,r2,2080
1010051c:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x000000A2);
10100520:	00c00044 	movi	r3,1
10100524:	00840034 	movhi	r2,4096
10100528:	10820804 	addi	r2,r2,2080
1010052c:	10c00035 	stwio	r3,0(r2)

	 LCD_WR_REG(0x000000C0); //Power control 1
10100530:	00c03004 	movi	r3,192
10100534:	00840034 	movhi	r2,4096
10100538:	10820804 	addi	r2,r2,2080
1010053c:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x00000005); //VRH[5:0]
10100540:	00c00044 	movi	r3,1
10100544:	00840034 	movhi	r2,4096
10100548:	10820804 	addi	r2,r2,2080
1010054c:	10c00035 	stwio	r3,0(r2)

	  LCD_WR_REG(0x000000C1); //Power control 2
10100550:	00c03044 	movi	r3,193
10100554:	00840034 	movhi	r2,4096
10100558:	10820804 	addi	r2,r2,2080
1010055c:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x00000011); //SAP[2:0];BT[3:0]
10100560:	00c00044 	movi	r3,1
10100564:	00840034 	movhi	r2,4096
10100568:	10820804 	addi	r2,r2,2080
1010056c:	10c00035 	stwio	r3,0(r2)

	 LCD_WR_REG(0x000000C5); //VCM control 1
10100570:	00c03144 	movi	r3,197
10100574:	00840034 	movhi	r2,4096
10100578:	10820804 	addi	r2,r2,2080
1010057c:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x00000045); //3F
10100580:	00c00044 	movi	r3,1
10100584:	00840034 	movhi	r2,4096
10100588:	10820804 	addi	r2,r2,2080
1010058c:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x00000045); //3
10100590:	00c00044 	movi	r3,1
10100594:	00840034 	movhi	r2,4096
10100598:	10820804 	addi	r2,r2,2080
1010059c:	10c00035 	stwio	r3,0(r2)

	 LCD_WR_REG(0x000000C7); //VCM control 2
101005a0:	00c031c4 	movi	r3,199
101005a4:	00840034 	movhi	r2,4096
101005a8:	10820804 	addi	r2,r2,2080
101005ac:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x000000a2);
101005b0:	00c00044 	movi	r3,1
101005b4:	00840034 	movhi	r2,4096
101005b8:	10820804 	addi	r2,r2,2080
101005bc:	10c00035 	stwio	r3,0(r2)

	 LCD_WR_REG(0x00000036); // Memory Access Control
101005c0:	00c00d84 	movi	r3,54
101005c4:	00840034 	movhi	r2,4096
101005c8:	10820804 	addi	r2,r2,2080
101005cc:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x00000008);// BGR order
101005d0:	00c00044 	movi	r3,1
101005d4:	00840034 	movhi	r2,4096
101005d8:	10820804 	addi	r2,r2,2080
101005dc:	10c00035 	stwio	r3,0(r2)

	 LCD_WR_REG(0x000000F2); // Enable 3G
101005e0:	00c03c84 	movi	r3,242
101005e4:	00840034 	movhi	r2,4096
101005e8:	10820804 	addi	r2,r2,2080
101005ec:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x00000000); // 3Gamma Function Disable
101005f0:	00c00044 	movi	r3,1
101005f4:	00840034 	movhi	r2,4096
101005f8:	10820804 	addi	r2,r2,2080
101005fc:	10c00035 	stwio	r3,0(r2)

	  LCD_WR_REG(0x00000026); // Gamma Set
10100600:	00c00984 	movi	r3,38
10100604:	00840034 	movhi	r2,4096
10100608:	10820804 	addi	r2,r2,2080
1010060c:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x00000001); // Gamma curve selected
10100610:	00c00044 	movi	r3,1
10100614:	00840034 	movhi	r2,4096
10100618:	10820804 	addi	r2,r2,2080
1010061c:	10c00035 	stwio	r3,0(r2)

	 LCD_WR_REG(0x000000E0); // Positive Gamma Correction, Set Gamma
10100620:	00c03804 	movi	r3,224
10100624:	00840034 	movhi	r2,4096
10100628:	10820804 	addi	r2,r2,2080
1010062c:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x0000000F);
10100630:	00c00044 	movi	r3,1
10100634:	00840034 	movhi	r2,4096
10100638:	10820804 	addi	r2,r2,2080
1010063c:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x00000026);
10100640:	00c00044 	movi	r3,1
10100644:	00840034 	movhi	r2,4096
10100648:	10820804 	addi	r2,r2,2080
1010064c:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x00000024);
10100650:	00c00044 	movi	r3,1
10100654:	00840034 	movhi	r2,4096
10100658:	10820804 	addi	r2,r2,2080
1010065c:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x0000000b);
10100660:	00c00044 	movi	r3,1
10100664:	00840034 	movhi	r2,4096
10100668:	10820804 	addi	r2,r2,2080
1010066c:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x0000000E);
10100670:	00c00044 	movi	r3,1
10100674:	00840034 	movhi	r2,4096
10100678:	10820804 	addi	r2,r2,2080
1010067c:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x00000008);
10100680:	00c00044 	movi	r3,1
10100684:	00840034 	movhi	r2,4096
10100688:	10820804 	addi	r2,r2,2080
1010068c:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x0000004b);
10100690:	00c00044 	movi	r3,1
10100694:	00840034 	movhi	r2,4096
10100698:	10820804 	addi	r2,r2,2080
1010069c:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x000000a8);
101006a0:	00c00044 	movi	r3,1
101006a4:	00840034 	movhi	r2,4096
101006a8:	10820804 	addi	r2,r2,2080
101006ac:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x0000003b);
101006b0:	00c00044 	movi	r3,1
101006b4:	00840034 	movhi	r2,4096
101006b8:	10820804 	addi	r2,r2,2080
101006bc:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x0000000a);
101006c0:	00c00044 	movi	r3,1
101006c4:	00840034 	movhi	r2,4096
101006c8:	10820804 	addi	r2,r2,2080
101006cc:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x00000014);
101006d0:	00c00044 	movi	r3,1
101006d4:	00840034 	movhi	r2,4096
101006d8:	10820804 	addi	r2,r2,2080
101006dc:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x00000006);
101006e0:	00c00044 	movi	r3,1
101006e4:	00840034 	movhi	r2,4096
101006e8:	10820804 	addi	r2,r2,2080
101006ec:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x00000010);
101006f0:	00c00044 	movi	r3,1
101006f4:	00840034 	movhi	r2,4096
101006f8:	10820804 	addi	r2,r2,2080
101006fc:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x00000009);
10100700:	00c00044 	movi	r3,1
10100704:	00840034 	movhi	r2,4096
10100708:	10820804 	addi	r2,r2,2080
1010070c:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x00000000);
10100710:	00c00044 	movi	r3,1
10100714:	00840034 	movhi	r2,4096
10100718:	10820804 	addi	r2,r2,2080
1010071c:	10c00035 	stwio	r3,0(r2)

	 LCD_WR_REG(0x000000E1); //Negative Gamma Correction, Set Gamma
10100720:	00c03844 	movi	r3,225
10100724:	00840034 	movhi	r2,4096
10100728:	10820804 	addi	r2,r2,2080
1010072c:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x00000000);
10100730:	00c00044 	movi	r3,1
10100734:	00840034 	movhi	r2,4096
10100738:	10820804 	addi	r2,r2,2080
1010073c:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x0000001c);
10100740:	00c00044 	movi	r3,1
10100744:	00840034 	movhi	r2,4096
10100748:	10820804 	addi	r2,r2,2080
1010074c:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x00000020);
10100750:	00c00044 	movi	r3,1
10100754:	00840034 	movhi	r2,4096
10100758:	10820804 	addi	r2,r2,2080
1010075c:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x00000004);
10100760:	00c00044 	movi	r3,1
10100764:	00840034 	movhi	r2,4096
10100768:	10820804 	addi	r2,r2,2080
1010076c:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x00000010);
10100770:	00c00044 	movi	r3,1
10100774:	00840034 	movhi	r2,4096
10100778:	10820804 	addi	r2,r2,2080
1010077c:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x00000008);
10100780:	00c00044 	movi	r3,1
10100784:	00840034 	movhi	r2,4096
10100788:	10820804 	addi	r2,r2,2080
1010078c:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x00000034);
10100790:	00c00044 	movi	r3,1
10100794:	00840034 	movhi	r2,4096
10100798:	10820804 	addi	r2,r2,2080
1010079c:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x00000047);
101007a0:	00c00044 	movi	r3,1
101007a4:	00840034 	movhi	r2,4096
101007a8:	10820804 	addi	r2,r2,2080
101007ac:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x00000044);
101007b0:	00c00044 	movi	r3,1
101007b4:	00840034 	movhi	r2,4096
101007b8:	10820804 	addi	r2,r2,2080
101007bc:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x00000005);
101007c0:	00c00044 	movi	r3,1
101007c4:	00840034 	movhi	r2,4096
101007c8:	10820804 	addi	r2,r2,2080
101007cc:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x0000000b);
101007d0:	00c00044 	movi	r3,1
101007d4:	00840034 	movhi	r2,4096
101007d8:	10820804 	addi	r2,r2,2080
101007dc:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x00000009);
101007e0:	00c00044 	movi	r3,1
101007e4:	00840034 	movhi	r2,4096
101007e8:	10820804 	addi	r2,r2,2080
101007ec:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x0000002f);
101007f0:	00c00044 	movi	r3,1
101007f4:	00840034 	movhi	r2,4096
101007f8:	10820804 	addi	r2,r2,2080
101007fc:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x00000036);
10100800:	00c00044 	movi	r3,1
10100804:	00840034 	movhi	r2,4096
10100808:	10820804 	addi	r2,r2,2080
1010080c:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x0000000f);
10100810:	00c00044 	movi	r3,1
10100814:	00840034 	movhi	r2,4096
10100818:	10820804 	addi	r2,r2,2080
1010081c:	10c00035 	stwio	r3,0(r2)

	 LCD_WR_REG(0x0000002A); // Column Address Set
10100820:	00c00a84 	movi	r3,42
10100824:	00840034 	movhi	r2,4096
10100828:	10820804 	addi	r2,r2,2080
1010082c:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x00000000);
10100830:	00c00044 	movi	r3,1
10100834:	00840034 	movhi	r2,4096
10100838:	10820804 	addi	r2,r2,2080
1010083c:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x00000000);
10100840:	00c00044 	movi	r3,1
10100844:	00840034 	movhi	r2,4096
10100848:	10820804 	addi	r2,r2,2080
1010084c:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x00000000);
10100850:	00c00044 	movi	r3,1
10100854:	00840034 	movhi	r2,4096
10100858:	10820804 	addi	r2,r2,2080
1010085c:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x000000ef);
10100860:	00c00044 	movi	r3,1
10100864:	00840034 	movhi	r2,4096
10100868:	10820804 	addi	r2,r2,2080
1010086c:	10c00035 	stwio	r3,0(r2)

	 LCD_WR_REG(0x0000002B); // Page Address Set
10100870:	00c00ac4 	movi	r3,43
10100874:	00840034 	movhi	r2,4096
10100878:	10820804 	addi	r2,r2,2080
1010087c:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x00000000);
10100880:	00c00044 	movi	r3,1
10100884:	00840034 	movhi	r2,4096
10100888:	10820804 	addi	r2,r2,2080
1010088c:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x00000000);
10100890:	00c00044 	movi	r3,1
10100894:	00840034 	movhi	r2,4096
10100898:	10820804 	addi	r2,r2,2080
1010089c:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x00000001);
101008a0:	00c00044 	movi	r3,1
101008a4:	00840034 	movhi	r2,4096
101008a8:	10820804 	addi	r2,r2,2080
101008ac:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x0000003f);
101008b0:	00c00044 	movi	r3,1
101008b4:	00840034 	movhi	r2,4096
101008b8:	10820804 	addi	r2,r2,2080
101008bc:	10c00035 	stwio	r3,0(r2)

	 LCD_WR_REG(0x0000003A); // COLMOD: Pixel Format Set
101008c0:	00c00e84 	movi	r3,58
101008c4:	00840034 	movhi	r2,4096
101008c8:	10820804 	addi	r2,r2,2080
101008cc:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x00000055);
101008d0:	00c00044 	movi	r3,1
101008d4:	00840034 	movhi	r2,4096
101008d8:	10820804 	addi	r2,r2,2080
101008dc:	10c00035 	stwio	r3,0(r2)

	 LCD_WR_REG(0x000000f6); // Interface Control
101008e0:	00c03d84 	movi	r3,246
101008e4:	00840034 	movhi	r2,4096
101008e8:	10820804 	addi	r2,r2,2080
101008ec:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x00000001);
101008f0:	00c00044 	movi	r3,1
101008f4:	00840034 	movhi	r2,4096
101008f8:	10820804 	addi	r2,r2,2080
101008fc:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x00000030);
10100900:	00c00044 	movi	r3,1
10100904:	00840034 	movhi	r2,4096
10100908:	10820804 	addi	r2,r2,2080
1010090c:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x00000000);
10100910:	00c00044 	movi	r3,1
10100914:	00840034 	movhi	r2,4096
10100918:	10820804 	addi	r2,r2,2080
1010091c:	10c00035 	stwio	r3,0(r2)

	 LCD_WR_REG(0x00000029); //display on
10100920:	00c00a44 	movi	r3,41
10100924:	00840034 	movhi	r2,4096
10100928:	10820804 	addi	r2,r2,2080
1010092c:	10c00035 	stwio	r3,0(r2)
	 LCD_WR_REG(0x0000002c); // 0x2C
10100930:	00c00b04 	movi	r3,44
10100934:	00840034 	movhi	r2,4096
10100938:	10820804 	addi	r2,r2,2080
1010093c:	10c00035 	stwio	r3,0(r2)





}
10100940:	0001883a 	nop
10100944:	e037883a 	mov	sp,fp
10100948:	dfc00117 	ldw	ra,4(sp)
1010094c:	df000017 	ldw	fp,0(sp)
10100950:	dec00204 	addi	sp,sp,8
10100954:	f800283a 	ret

10100958 <main>:

//function to load an image on the SD card
void write_image();

int main()
{
10100958:	defffe04 	addi	sp,sp,-8
1010095c:	dfc00115 	stw	ra,4(sp)
10100960:	df000015 	stw	fp,0(sp)
10100964:	d839883a 	mov	fp,sp
	//write an image to memory
	write_image();
10100968:	01009940 	call	10100994 <write_image>
	//initialize the LCD
	LCD_init();
1010096c:	01002e80 	call	101002e8 <LCD_init>

	//tells the LCD to display the written image
	IOWR_32DIRECT(LCD_CONTROLLER_0_BASE, ADDRESS_REG, HPS_0_BRIDGES_BASE);
10100970:	0007883a 	mov	r3,zero
10100974:	00840034 	movhi	r2,4096
10100978:	10820904 	addi	r2,r2,2084
1010097c:	10c00035 	stwio	r3,0(r2)
	IOWR_32DIRECT(LCD_CONTROLLER_0_BASE, COMMAND_REG, DISPLAY_COMMAND);
10100980:	00c00b04 	movi	r3,44
10100984:	00840034 	movhi	r2,4096
10100988:	10820804 	addi	r2,r2,2080
1010098c:	10c00035 	stwio	r3,0(r2)


	while(1) {


	}
10100990:	003fff06 	br	10100990 <__alt_data_end+0xfffe0990>

10100994 <write_image>:
}




void write_image() {
10100994:	defffe04 	addi	sp,sp,-8
10100998:	df000115 	stw	fp,4(sp)
1010099c:	df000104 	addi	fp,sp,4
	/*	generates and loads an image to the SDRAM */
	for (alt_u32 i = 0; i < NBR_PIXEL; ++i)
101009a0:	e03fff15 	stw	zero,-4(fp)
101009a4:	00000806 	br	101009c8 <write_image+0x34>
	{
		IOWR_16DIRECT(HPS_0_BRIDGES_BASE, 2*i, RED);
101009a8:	e0bfff17 	ldw	r2,-4(fp)
101009ac:	1085883a 	add	r2,r2,r2
101009b0:	1007883a 	mov	r3,r2
101009b4:	00be0004 	movi	r2,-2048
101009b8:	1880002d 	sthio	r2,0(r3)



void write_image() {
	/*	generates and loads an image to the SDRAM */
	for (alt_u32 i = 0; i < NBR_PIXEL; ++i)
101009bc:	e0bfff17 	ldw	r2,-4(fp)
101009c0:	10800044 	addi	r2,r2,1
101009c4:	e0bfff15 	stw	r2,-4(fp)
101009c8:	e0ffff17 	ldw	r3,-4(fp)
101009cc:	00800074 	movhi	r2,1
101009d0:	108affc4 	addi	r2,r2,11263
101009d4:	10fff42e 	bgeu	r2,r3,101009a8 <__alt_data_end+0xfffe09a8>
	{
		IOWR_16DIRECT(HPS_0_BRIDGES_BASE, 2*i, RED);
	}
}
101009d8:	0001883a 	nop
101009dc:	e037883a 	mov	sp,fp
101009e0:	df000017 	ldw	fp,0(sp)
101009e4:	dec00104 	addi	sp,sp,4
101009e8:	f800283a 	ret

101009ec <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
101009ec:	defffc04 	addi	sp,sp,-16
101009f0:	df000315 	stw	fp,12(sp)
101009f4:	df000304 	addi	fp,sp,12
101009f8:	e13ffd15 	stw	r4,-12(fp)
101009fc:	e17ffe15 	stw	r5,-8(fp)
10100a00:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
10100a04:	e0fffe17 	ldw	r3,-8(fp)
10100a08:	e0bffd17 	ldw	r2,-12(fp)
10100a0c:	18800c26 	beq	r3,r2,10100a40 <alt_load_section+0x54>
  {
    while( to != end )
10100a10:	00000806 	br	10100a34 <alt_load_section+0x48>
    {
      *to++ = *from++;
10100a14:	e0bffe17 	ldw	r2,-8(fp)
10100a18:	10c00104 	addi	r3,r2,4
10100a1c:	e0fffe15 	stw	r3,-8(fp)
10100a20:	e0fffd17 	ldw	r3,-12(fp)
10100a24:	19000104 	addi	r4,r3,4
10100a28:	e13ffd15 	stw	r4,-12(fp)
10100a2c:	18c00017 	ldw	r3,0(r3)
10100a30:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
10100a34:	e0fffe17 	ldw	r3,-8(fp)
10100a38:	e0bfff17 	ldw	r2,-4(fp)
10100a3c:	18bff51e 	bne	r3,r2,10100a14 <__alt_data_end+0xfffe0a14>
    {
      *to++ = *from++;
    }
  }
}
10100a40:	0001883a 	nop
10100a44:	e037883a 	mov	sp,fp
10100a48:	df000017 	ldw	fp,0(sp)
10100a4c:	dec00104 	addi	sp,sp,4
10100a50:	f800283a 	ret

10100a54 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
10100a54:	defffe04 	addi	sp,sp,-8
10100a58:	dfc00115 	stw	ra,4(sp)
10100a5c:	df000015 	stw	fp,0(sp)
10100a60:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
10100a64:	01840434 	movhi	r6,4112
10100a68:	31921204 	addi	r6,r6,18504
10100a6c:	01440434 	movhi	r5,4112
10100a70:	294c6004 	addi	r5,r5,12672
10100a74:	01040434 	movhi	r4,4112
10100a78:	21121204 	addi	r4,r4,18504
10100a7c:	01009ec0 	call	101009ec <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
10100a80:	01840434 	movhi	r6,4112
10100a84:	31809104 	addi	r6,r6,580
10100a88:	01440434 	movhi	r5,4112
10100a8c:	29400804 	addi	r5,r5,32
10100a90:	01040434 	movhi	r4,4112
10100a94:	21000804 	addi	r4,r4,32
10100a98:	01009ec0 	call	101009ec <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
10100a9c:	01840434 	movhi	r6,4112
10100aa0:	318c6004 	addi	r6,r6,12672
10100aa4:	01440434 	movhi	r5,4112
10100aa8:	294c4f04 	addi	r5,r5,12604
10100aac:	01040434 	movhi	r4,4112
10100ab0:	210c4f04 	addi	r4,r4,12604
10100ab4:	01009ec0 	call	101009ec <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
10100ab8:	0101d380 	call	10101d38 <alt_dcache_flush_all>
  alt_icache_flush_all();
10100abc:	0101fcc0 	call	10101fcc <alt_icache_flush_all>
}
10100ac0:	0001883a 	nop
10100ac4:	e037883a 	mov	sp,fp
10100ac8:	dfc00117 	ldw	ra,4(sp)
10100acc:	df000017 	ldw	fp,0(sp)
10100ad0:	dec00204 	addi	sp,sp,8
10100ad4:	f800283a 	ret

10100ad8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
10100ad8:	defffd04 	addi	sp,sp,-12
10100adc:	dfc00215 	stw	ra,8(sp)
10100ae0:	df000115 	stw	fp,4(sp)
10100ae4:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
10100ae8:	0009883a 	mov	r4,zero
10100aec:	0100b880 	call	10100b88 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
10100af0:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
10100af4:	0100bc00 	call	10100bc0 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
10100af8:	01840434 	movhi	r6,4112
10100afc:	318c4f04 	addi	r6,r6,12604
10100b00:	01440434 	movhi	r5,4112
10100b04:	294c4f04 	addi	r5,r5,12604
10100b08:	01040434 	movhi	r4,4112
10100b0c:	210c4f04 	addi	r4,r4,12604
10100b10:	01023640 	call	10102364 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
10100b14:	0101e8c0 	call	10101e8c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
10100b18:	01040434 	movhi	r4,4112
10100b1c:	2107bb04 	addi	r4,r4,7916
10100b20:	0102bc80 	call	10102bc8 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
10100b24:	d0a5cf17 	ldw	r2,-26820(gp)
10100b28:	d0e5d017 	ldw	r3,-26816(gp)
10100b2c:	d125d117 	ldw	r4,-26812(gp)
10100b30:	200d883a 	mov	r6,r4
10100b34:	180b883a 	mov	r5,r3
10100b38:	1009883a 	mov	r4,r2
10100b3c:	01009580 	call	10100958 <main>
10100b40:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
10100b44:	01000044 	movi	r4,1
10100b48:	0101c680 	call	10101c68 <close>
  exit (result);
10100b4c:	e13fff17 	ldw	r4,-4(fp)
10100b50:	0102bdc0 	call	10102bdc <exit>

10100b54 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
10100b54:	defffd04 	addi	sp,sp,-12
10100b58:	dfc00215 	stw	ra,8(sp)
10100b5c:	df000115 	stw	fp,4(sp)
10100b60:	df000104 	addi	fp,sp,4
10100b64:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
10100b68:	d1601404 	addi	r5,gp,-32688
10100b6c:	e13fff17 	ldw	r4,-4(fp)
10100b70:	0101de80 	call	10101de8 <alt_dev_llist_insert>
}
10100b74:	e037883a 	mov	sp,fp
10100b78:	dfc00117 	ldw	ra,4(sp)
10100b7c:	df000017 	ldw	fp,0(sp)
10100b80:	dec00204 	addi	sp,sp,8
10100b84:	f800283a 	ret

10100b88 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
10100b88:	defffd04 	addi	sp,sp,-12
10100b8c:	dfc00215 	stw	ra,8(sp)
10100b90:	df000115 	stw	fp,4(sp)
10100b94:	df000104 	addi	fp,sp,4
10100b98:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
10100b9c:	010283c0 	call	1010283c <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
10100ba0:	00800044 	movi	r2,1
10100ba4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
10100ba8:	0001883a 	nop
10100bac:	e037883a 	mov	sp,fp
10100bb0:	dfc00117 	ldw	ra,4(sp)
10100bb4:	df000017 	ldw	fp,0(sp)
10100bb8:	dec00204 	addi	sp,sp,8
10100bbc:	f800283a 	ret

10100bc0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
10100bc0:	defffe04 	addi	sp,sp,-8
10100bc4:	dfc00115 	stw	ra,4(sp)
10100bc8:	df000015 	stw	fp,0(sp)
10100bcc:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
10100bd0:	000d883a 	mov	r6,zero
10100bd4:	000b883a 	mov	r5,zero
10100bd8:	01040434 	movhi	r4,4112
10100bdc:	210c6a04 	addi	r4,r4,12712
10100be0:	0100d780 	call	10100d78 <altera_avalon_jtag_uart_init>
10100be4:	01040434 	movhi	r4,4112
10100be8:	210c6004 	addi	r4,r4,12672
10100bec:	0100b540 	call	10100b54 <alt_dev_reg>
    ALTERA_HOSTFS_INIT ( ALTERA_HOSTFS, altera_hostfs);
10100bf0:	01040434 	movhi	r4,4112
10100bf4:	21107804 	addi	r4,r4,16864
10100bf8:	0101f4c0 	call	10101f4c <alt_fs_reg>
}
10100bfc:	0001883a 	nop
10100c00:	e037883a 	mov	sp,fp
10100c04:	dfc00117 	ldw	ra,4(sp)
10100c08:	df000017 	ldw	fp,0(sp)
10100c0c:	dec00204 	addi	sp,sp,8
10100c10:	f800283a 	ret

10100c14 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
10100c14:	defffa04 	addi	sp,sp,-24
10100c18:	dfc00515 	stw	ra,20(sp)
10100c1c:	df000415 	stw	fp,16(sp)
10100c20:	df000404 	addi	fp,sp,16
10100c24:	e13ffd15 	stw	r4,-12(fp)
10100c28:	e17ffe15 	stw	r5,-8(fp)
10100c2c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
10100c30:	e0bffd17 	ldw	r2,-12(fp)
10100c34:	10800017 	ldw	r2,0(r2)
10100c38:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
10100c3c:	e0bffc17 	ldw	r2,-16(fp)
10100c40:	10c00a04 	addi	r3,r2,40
10100c44:	e0bffd17 	ldw	r2,-12(fp)
10100c48:	10800217 	ldw	r2,8(r2)
10100c4c:	100f883a 	mov	r7,r2
10100c50:	e1bfff17 	ldw	r6,-4(fp)
10100c54:	e17ffe17 	ldw	r5,-8(fp)
10100c58:	1809883a 	mov	r4,r3
10100c5c:	010123c0 	call	1010123c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
10100c60:	e037883a 	mov	sp,fp
10100c64:	dfc00117 	ldw	ra,4(sp)
10100c68:	df000017 	ldw	fp,0(sp)
10100c6c:	dec00204 	addi	sp,sp,8
10100c70:	f800283a 	ret

10100c74 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
10100c74:	defffa04 	addi	sp,sp,-24
10100c78:	dfc00515 	stw	ra,20(sp)
10100c7c:	df000415 	stw	fp,16(sp)
10100c80:	df000404 	addi	fp,sp,16
10100c84:	e13ffd15 	stw	r4,-12(fp)
10100c88:	e17ffe15 	stw	r5,-8(fp)
10100c8c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
10100c90:	e0bffd17 	ldw	r2,-12(fp)
10100c94:	10800017 	ldw	r2,0(r2)
10100c98:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
10100c9c:	e0bffc17 	ldw	r2,-16(fp)
10100ca0:	10c00a04 	addi	r3,r2,40
10100ca4:	e0bffd17 	ldw	r2,-12(fp)
10100ca8:	10800217 	ldw	r2,8(r2)
10100cac:	100f883a 	mov	r7,r2
10100cb0:	e1bfff17 	ldw	r6,-4(fp)
10100cb4:	e17ffe17 	ldw	r5,-8(fp)
10100cb8:	1809883a 	mov	r4,r3
10100cbc:	01014580 	call	10101458 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
10100cc0:	e037883a 	mov	sp,fp
10100cc4:	dfc00117 	ldw	ra,4(sp)
10100cc8:	df000017 	ldw	fp,0(sp)
10100ccc:	dec00204 	addi	sp,sp,8
10100cd0:	f800283a 	ret

10100cd4 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
10100cd4:	defffc04 	addi	sp,sp,-16
10100cd8:	dfc00315 	stw	ra,12(sp)
10100cdc:	df000215 	stw	fp,8(sp)
10100ce0:	df000204 	addi	fp,sp,8
10100ce4:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
10100ce8:	e0bfff17 	ldw	r2,-4(fp)
10100cec:	10800017 	ldw	r2,0(r2)
10100cf0:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
10100cf4:	e0bffe17 	ldw	r2,-8(fp)
10100cf8:	10c00a04 	addi	r3,r2,40
10100cfc:	e0bfff17 	ldw	r2,-4(fp)
10100d00:	10800217 	ldw	r2,8(r2)
10100d04:	100b883a 	mov	r5,r2
10100d08:	1809883a 	mov	r4,r3
10100d0c:	01010e40 	call	101010e4 <altera_avalon_jtag_uart_close>
}
10100d10:	e037883a 	mov	sp,fp
10100d14:	dfc00117 	ldw	ra,4(sp)
10100d18:	df000017 	ldw	fp,0(sp)
10100d1c:	dec00204 	addi	sp,sp,8
10100d20:	f800283a 	ret

10100d24 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
10100d24:	defffa04 	addi	sp,sp,-24
10100d28:	dfc00515 	stw	ra,20(sp)
10100d2c:	df000415 	stw	fp,16(sp)
10100d30:	df000404 	addi	fp,sp,16
10100d34:	e13ffd15 	stw	r4,-12(fp)
10100d38:	e17ffe15 	stw	r5,-8(fp)
10100d3c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
10100d40:	e0bffd17 	ldw	r2,-12(fp)
10100d44:	10800017 	ldw	r2,0(r2)
10100d48:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
10100d4c:	e0bffc17 	ldw	r2,-16(fp)
10100d50:	10800a04 	addi	r2,r2,40
10100d54:	e1bfff17 	ldw	r6,-4(fp)
10100d58:	e17ffe17 	ldw	r5,-8(fp)
10100d5c:	1009883a 	mov	r4,r2
10100d60:	010114c0 	call	1010114c <altera_avalon_jtag_uart_ioctl>
}
10100d64:	e037883a 	mov	sp,fp
10100d68:	dfc00117 	ldw	ra,4(sp)
10100d6c:	df000017 	ldw	fp,0(sp)
10100d70:	dec00204 	addi	sp,sp,8
10100d74:	f800283a 	ret

10100d78 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
10100d78:	defffa04 	addi	sp,sp,-24
10100d7c:	dfc00515 	stw	ra,20(sp)
10100d80:	df000415 	stw	fp,16(sp)
10100d84:	df000404 	addi	fp,sp,16
10100d88:	e13ffd15 	stw	r4,-12(fp)
10100d8c:	e17ffe15 	stw	r5,-8(fp)
10100d90:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
10100d94:	e0bffd17 	ldw	r2,-12(fp)
10100d98:	00c00044 	movi	r3,1
10100d9c:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
10100da0:	e0bffd17 	ldw	r2,-12(fp)
10100da4:	10800017 	ldw	r2,0(r2)
10100da8:	10800104 	addi	r2,r2,4
10100dac:	1007883a 	mov	r3,r2
10100db0:	e0bffd17 	ldw	r2,-12(fp)
10100db4:	10800817 	ldw	r2,32(r2)
10100db8:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
10100dbc:	e0bffe17 	ldw	r2,-8(fp)
10100dc0:	e0ffff17 	ldw	r3,-4(fp)
10100dc4:	d8000015 	stw	zero,0(sp)
10100dc8:	e1fffd17 	ldw	r7,-12(fp)
10100dcc:	01840434 	movhi	r6,4112
10100dd0:	31838e04 	addi	r6,r6,3640
10100dd4:	180b883a 	mov	r5,r3
10100dd8:	1009883a 	mov	r4,r2
10100ddc:	01020000 	call	10102000 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
10100de0:	e0bffd17 	ldw	r2,-12(fp)
10100de4:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
10100de8:	e0bffd17 	ldw	r2,-12(fp)
10100dec:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
10100df0:	d0e5d317 	ldw	r3,-26804(gp)
10100df4:	e1fffd17 	ldw	r7,-12(fp)
10100df8:	01840434 	movhi	r6,4112
10100dfc:	31841104 	addi	r6,r6,4164
10100e00:	180b883a 	mov	r5,r3
10100e04:	1009883a 	mov	r4,r2
10100e08:	0101b000 	call	10101b00 <alt_alarm_start>
10100e0c:	1000040e 	bge	r2,zero,10100e20 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
10100e10:	e0fffd17 	ldw	r3,-12(fp)
10100e14:	00a00034 	movhi	r2,32768
10100e18:	10bfffc4 	addi	r2,r2,-1
10100e1c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
10100e20:	0001883a 	nop
10100e24:	e037883a 	mov	sp,fp
10100e28:	dfc00117 	ldw	ra,4(sp)
10100e2c:	df000017 	ldw	fp,0(sp)
10100e30:	dec00204 	addi	sp,sp,8
10100e34:	f800283a 	ret

10100e38 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
10100e38:	defff804 	addi	sp,sp,-32
10100e3c:	df000715 	stw	fp,28(sp)
10100e40:	df000704 	addi	fp,sp,28
10100e44:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
10100e48:	e0bfff17 	ldw	r2,-4(fp)
10100e4c:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
10100e50:	e0bffb17 	ldw	r2,-20(fp)
10100e54:	10800017 	ldw	r2,0(r2)
10100e58:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
10100e5c:	e0bffc17 	ldw	r2,-16(fp)
10100e60:	10800104 	addi	r2,r2,4
10100e64:	10800037 	ldwio	r2,0(r2)
10100e68:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
10100e6c:	e0bffd17 	ldw	r2,-12(fp)
10100e70:	1080c00c 	andi	r2,r2,768
10100e74:	10006d26 	beq	r2,zero,1010102c <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
10100e78:	e0bffd17 	ldw	r2,-12(fp)
10100e7c:	1080400c 	andi	r2,r2,256
10100e80:	10003526 	beq	r2,zero,10100f58 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
10100e84:	00800074 	movhi	r2,1
10100e88:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10100e8c:	e0bffb17 	ldw	r2,-20(fp)
10100e90:	10800a17 	ldw	r2,40(r2)
10100e94:	10800044 	addi	r2,r2,1
10100e98:	1081ffcc 	andi	r2,r2,2047
10100e9c:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
10100ea0:	e0bffb17 	ldw	r2,-20(fp)
10100ea4:	10c00b17 	ldw	r3,44(r2)
10100ea8:	e0bffe17 	ldw	r2,-8(fp)
10100eac:	18801526 	beq	r3,r2,10100f04 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
10100eb0:	e0bffc17 	ldw	r2,-16(fp)
10100eb4:	10800037 	ldwio	r2,0(r2)
10100eb8:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
10100ebc:	e0bff917 	ldw	r2,-28(fp)
10100ec0:	10a0000c 	andi	r2,r2,32768
10100ec4:	10001126 	beq	r2,zero,10100f0c <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
10100ec8:	e0bffb17 	ldw	r2,-20(fp)
10100ecc:	10800a17 	ldw	r2,40(r2)
10100ed0:	e0fff917 	ldw	r3,-28(fp)
10100ed4:	1809883a 	mov	r4,r3
10100ed8:	e0fffb17 	ldw	r3,-20(fp)
10100edc:	1885883a 	add	r2,r3,r2
10100ee0:	10800e04 	addi	r2,r2,56
10100ee4:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10100ee8:	e0bffb17 	ldw	r2,-20(fp)
10100eec:	10800a17 	ldw	r2,40(r2)
10100ef0:	10800044 	addi	r2,r2,1
10100ef4:	10c1ffcc 	andi	r3,r2,2047
10100ef8:	e0bffb17 	ldw	r2,-20(fp)
10100efc:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
10100f00:	003fe206 	br	10100e8c <__alt_data_end+0xfffe0e8c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
10100f04:	0001883a 	nop
10100f08:	00000106 	br	10100f10 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
10100f0c:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
10100f10:	e0bff917 	ldw	r2,-28(fp)
10100f14:	10bfffec 	andhi	r2,r2,65535
10100f18:	10000f26 	beq	r2,zero,10100f58 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
10100f1c:	e0bffb17 	ldw	r2,-20(fp)
10100f20:	10c00817 	ldw	r3,32(r2)
10100f24:	00bfff84 	movi	r2,-2
10100f28:	1886703a 	and	r3,r3,r2
10100f2c:	e0bffb17 	ldw	r2,-20(fp)
10100f30:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
10100f34:	e0bffc17 	ldw	r2,-16(fp)
10100f38:	10800104 	addi	r2,r2,4
10100f3c:	1007883a 	mov	r3,r2
10100f40:	e0bffb17 	ldw	r2,-20(fp)
10100f44:	10800817 	ldw	r2,32(r2)
10100f48:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
10100f4c:	e0bffc17 	ldw	r2,-16(fp)
10100f50:	10800104 	addi	r2,r2,4
10100f54:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
10100f58:	e0bffd17 	ldw	r2,-12(fp)
10100f5c:	1080800c 	andi	r2,r2,512
10100f60:	103fbe26 	beq	r2,zero,10100e5c <__alt_data_end+0xfffe0e5c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
10100f64:	e0bffd17 	ldw	r2,-12(fp)
10100f68:	1004d43a 	srli	r2,r2,16
10100f6c:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
10100f70:	00001406 	br	10100fc4 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
10100f74:	e0bffc17 	ldw	r2,-16(fp)
10100f78:	e0fffb17 	ldw	r3,-20(fp)
10100f7c:	18c00d17 	ldw	r3,52(r3)
10100f80:	e13ffb17 	ldw	r4,-20(fp)
10100f84:	20c7883a 	add	r3,r4,r3
10100f88:	18c20e04 	addi	r3,r3,2104
10100f8c:	18c00003 	ldbu	r3,0(r3)
10100f90:	18c03fcc 	andi	r3,r3,255
10100f94:	18c0201c 	xori	r3,r3,128
10100f98:	18ffe004 	addi	r3,r3,-128
10100f9c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10100fa0:	e0bffb17 	ldw	r2,-20(fp)
10100fa4:	10800d17 	ldw	r2,52(r2)
10100fa8:	10800044 	addi	r2,r2,1
10100fac:	10c1ffcc 	andi	r3,r2,2047
10100fb0:	e0bffb17 	ldw	r2,-20(fp)
10100fb4:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
10100fb8:	e0bffa17 	ldw	r2,-24(fp)
10100fbc:	10bfffc4 	addi	r2,r2,-1
10100fc0:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
10100fc4:	e0bffa17 	ldw	r2,-24(fp)
10100fc8:	10000526 	beq	r2,zero,10100fe0 <altera_avalon_jtag_uart_irq+0x1a8>
10100fcc:	e0bffb17 	ldw	r2,-20(fp)
10100fd0:	10c00d17 	ldw	r3,52(r2)
10100fd4:	e0bffb17 	ldw	r2,-20(fp)
10100fd8:	10800c17 	ldw	r2,48(r2)
10100fdc:	18bfe51e 	bne	r3,r2,10100f74 <__alt_data_end+0xfffe0f74>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
10100fe0:	e0bffa17 	ldw	r2,-24(fp)
10100fe4:	103f9d26 	beq	r2,zero,10100e5c <__alt_data_end+0xfffe0e5c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
10100fe8:	e0bffb17 	ldw	r2,-20(fp)
10100fec:	10c00817 	ldw	r3,32(r2)
10100ff0:	00bfff44 	movi	r2,-3
10100ff4:	1886703a 	and	r3,r3,r2
10100ff8:	e0bffb17 	ldw	r2,-20(fp)
10100ffc:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10101000:	e0bffb17 	ldw	r2,-20(fp)
10101004:	10800017 	ldw	r2,0(r2)
10101008:	10800104 	addi	r2,r2,4
1010100c:	1007883a 	mov	r3,r2
10101010:	e0bffb17 	ldw	r2,-20(fp)
10101014:	10800817 	ldw	r2,32(r2)
10101018:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
1010101c:	e0bffc17 	ldw	r2,-16(fp)
10101020:	10800104 	addi	r2,r2,4
10101024:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
10101028:	003f8c06 	br	10100e5c <__alt_data_end+0xfffe0e5c>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
1010102c:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
10101030:	0001883a 	nop
10101034:	e037883a 	mov	sp,fp
10101038:	df000017 	ldw	fp,0(sp)
1010103c:	dec00104 	addi	sp,sp,4
10101040:	f800283a 	ret

10101044 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
10101044:	defff804 	addi	sp,sp,-32
10101048:	df000715 	stw	fp,28(sp)
1010104c:	df000704 	addi	fp,sp,28
10101050:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
10101054:	e0bffb17 	ldw	r2,-20(fp)
10101058:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
1010105c:	e0bff917 	ldw	r2,-28(fp)
10101060:	10800017 	ldw	r2,0(r2)
10101064:	10800104 	addi	r2,r2,4
10101068:	10800037 	ldwio	r2,0(r2)
1010106c:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
10101070:	e0bffa17 	ldw	r2,-24(fp)
10101074:	1081000c 	andi	r2,r2,1024
10101078:	10000b26 	beq	r2,zero,101010a8 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
1010107c:	e0bff917 	ldw	r2,-28(fp)
10101080:	10800017 	ldw	r2,0(r2)
10101084:	10800104 	addi	r2,r2,4
10101088:	1007883a 	mov	r3,r2
1010108c:	e0bff917 	ldw	r2,-28(fp)
10101090:	10800817 	ldw	r2,32(r2)
10101094:	10810014 	ori	r2,r2,1024
10101098:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
1010109c:	e0bff917 	ldw	r2,-28(fp)
101010a0:	10000915 	stw	zero,36(r2)
101010a4:	00000a06 	br	101010d0 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
101010a8:	e0bff917 	ldw	r2,-28(fp)
101010ac:	10c00917 	ldw	r3,36(r2)
101010b0:	00a00034 	movhi	r2,32768
101010b4:	10bfff04 	addi	r2,r2,-4
101010b8:	10c00536 	bltu	r2,r3,101010d0 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
101010bc:	e0bff917 	ldw	r2,-28(fp)
101010c0:	10800917 	ldw	r2,36(r2)
101010c4:	10c00044 	addi	r3,r2,1
101010c8:	e0bff917 	ldw	r2,-28(fp)
101010cc:	10c00915 	stw	r3,36(r2)
101010d0:	d0a5d317 	ldw	r2,-26804(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
101010d4:	e037883a 	mov	sp,fp
101010d8:	df000017 	ldw	fp,0(sp)
101010dc:	dec00104 	addi	sp,sp,4
101010e0:	f800283a 	ret

101010e4 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
101010e4:	defffd04 	addi	sp,sp,-12
101010e8:	df000215 	stw	fp,8(sp)
101010ec:	df000204 	addi	fp,sp,8
101010f0:	e13ffe15 	stw	r4,-8(fp)
101010f4:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
101010f8:	00000506 	br	10101110 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
101010fc:	e0bfff17 	ldw	r2,-4(fp)
10101100:	1090000c 	andi	r2,r2,16384
10101104:	10000226 	beq	r2,zero,10101110 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
10101108:	00bffd44 	movi	r2,-11
1010110c:	00000b06 	br	1010113c <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
10101110:	e0bffe17 	ldw	r2,-8(fp)
10101114:	10c00d17 	ldw	r3,52(r2)
10101118:	e0bffe17 	ldw	r2,-8(fp)
1010111c:	10800c17 	ldw	r2,48(r2)
10101120:	18800526 	beq	r3,r2,10101138 <altera_avalon_jtag_uart_close+0x54>
10101124:	e0bffe17 	ldw	r2,-8(fp)
10101128:	10c00917 	ldw	r3,36(r2)
1010112c:	e0bffe17 	ldw	r2,-8(fp)
10101130:	10800117 	ldw	r2,4(r2)
10101134:	18bff136 	bltu	r3,r2,101010fc <__alt_data_end+0xfffe10fc>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
10101138:	0005883a 	mov	r2,zero
}
1010113c:	e037883a 	mov	sp,fp
10101140:	df000017 	ldw	fp,0(sp)
10101144:	dec00104 	addi	sp,sp,4
10101148:	f800283a 	ret

1010114c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
1010114c:	defffa04 	addi	sp,sp,-24
10101150:	df000515 	stw	fp,20(sp)
10101154:	df000504 	addi	fp,sp,20
10101158:	e13ffd15 	stw	r4,-12(fp)
1010115c:	e17ffe15 	stw	r5,-8(fp)
10101160:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
10101164:	00bff9c4 	movi	r2,-25
10101168:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
1010116c:	e0bffe17 	ldw	r2,-8(fp)
10101170:	10da8060 	cmpeqi	r3,r2,27137
10101174:	1800031e 	bne	r3,zero,10101184 <altera_avalon_jtag_uart_ioctl+0x38>
10101178:	109a80a0 	cmpeqi	r2,r2,27138
1010117c:	1000181e 	bne	r2,zero,101011e0 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
10101180:	00002906 	br	10101228 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
10101184:	e0bffd17 	ldw	r2,-12(fp)
10101188:	10c00117 	ldw	r3,4(r2)
1010118c:	00a00034 	movhi	r2,32768
10101190:	10bfffc4 	addi	r2,r2,-1
10101194:	18802126 	beq	r3,r2,1010121c <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
10101198:	e0bfff17 	ldw	r2,-4(fp)
1010119c:	10800017 	ldw	r2,0(r2)
101011a0:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
101011a4:	e0bffc17 	ldw	r2,-16(fp)
101011a8:	10800090 	cmplti	r2,r2,2
101011ac:	1000061e 	bne	r2,zero,101011c8 <altera_avalon_jtag_uart_ioctl+0x7c>
101011b0:	e0fffc17 	ldw	r3,-16(fp)
101011b4:	00a00034 	movhi	r2,32768
101011b8:	10bfffc4 	addi	r2,r2,-1
101011bc:	18800226 	beq	r3,r2,101011c8 <altera_avalon_jtag_uart_ioctl+0x7c>
101011c0:	e0bffc17 	ldw	r2,-16(fp)
101011c4:	00000206 	br	101011d0 <altera_avalon_jtag_uart_ioctl+0x84>
101011c8:	00a00034 	movhi	r2,32768
101011cc:	10bfff84 	addi	r2,r2,-2
101011d0:	e0fffd17 	ldw	r3,-12(fp)
101011d4:	18800115 	stw	r2,4(r3)
      rc = 0;
101011d8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
101011dc:	00000f06 	br	1010121c <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
101011e0:	e0bffd17 	ldw	r2,-12(fp)
101011e4:	10c00117 	ldw	r3,4(r2)
101011e8:	00a00034 	movhi	r2,32768
101011ec:	10bfffc4 	addi	r2,r2,-1
101011f0:	18800c26 	beq	r3,r2,10101224 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
101011f4:	e0bffd17 	ldw	r2,-12(fp)
101011f8:	10c00917 	ldw	r3,36(r2)
101011fc:	e0bffd17 	ldw	r2,-12(fp)
10101200:	10800117 	ldw	r2,4(r2)
10101204:	1885803a 	cmpltu	r2,r3,r2
10101208:	10c03fcc 	andi	r3,r2,255
1010120c:	e0bfff17 	ldw	r2,-4(fp)
10101210:	10c00015 	stw	r3,0(r2)
      rc = 0;
10101214:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
10101218:	00000206 	br	10101224 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
1010121c:	0001883a 	nop
10101220:	00000106 	br	10101228 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
10101224:	0001883a 	nop

  default:
    break;
  }

  return rc;
10101228:	e0bffb17 	ldw	r2,-20(fp)
}
1010122c:	e037883a 	mov	sp,fp
10101230:	df000017 	ldw	fp,0(sp)
10101234:	dec00104 	addi	sp,sp,4
10101238:	f800283a 	ret

1010123c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
1010123c:	defff304 	addi	sp,sp,-52
10101240:	dfc00c15 	stw	ra,48(sp)
10101244:	df000b15 	stw	fp,44(sp)
10101248:	df000b04 	addi	fp,sp,44
1010124c:	e13ffc15 	stw	r4,-16(fp)
10101250:	e17ffd15 	stw	r5,-12(fp)
10101254:	e1bffe15 	stw	r6,-8(fp)
10101258:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
1010125c:	e0bffd17 	ldw	r2,-12(fp)
10101260:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
10101264:	00004706 	br	10101384 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
10101268:	e0bffc17 	ldw	r2,-16(fp)
1010126c:	10800a17 	ldw	r2,40(r2)
10101270:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
10101274:	e0bffc17 	ldw	r2,-16(fp)
10101278:	10800b17 	ldw	r2,44(r2)
1010127c:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
10101280:	e0fff717 	ldw	r3,-36(fp)
10101284:	e0bff817 	ldw	r2,-32(fp)
10101288:	18800536 	bltu	r3,r2,101012a0 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
1010128c:	e0fff717 	ldw	r3,-36(fp)
10101290:	e0bff817 	ldw	r2,-32(fp)
10101294:	1885c83a 	sub	r2,r3,r2
10101298:	e0bff615 	stw	r2,-40(fp)
1010129c:	00000406 	br	101012b0 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
101012a0:	00c20004 	movi	r3,2048
101012a4:	e0bff817 	ldw	r2,-32(fp)
101012a8:	1885c83a 	sub	r2,r3,r2
101012ac:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
101012b0:	e0bff617 	ldw	r2,-40(fp)
101012b4:	10001e26 	beq	r2,zero,10101330 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
101012b8:	e0fffe17 	ldw	r3,-8(fp)
101012bc:	e0bff617 	ldw	r2,-40(fp)
101012c0:	1880022e 	bgeu	r3,r2,101012cc <altera_avalon_jtag_uart_read+0x90>
        n = space;
101012c4:	e0bffe17 	ldw	r2,-8(fp)
101012c8:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
101012cc:	e0bffc17 	ldw	r2,-16(fp)
101012d0:	10c00e04 	addi	r3,r2,56
101012d4:	e0bff817 	ldw	r2,-32(fp)
101012d8:	1885883a 	add	r2,r3,r2
101012dc:	e1bff617 	ldw	r6,-40(fp)
101012e0:	100b883a 	mov	r5,r2
101012e4:	e13ff517 	ldw	r4,-44(fp)
101012e8:	0102c900 	call	10102c90 <memcpy>
      ptr   += n;
101012ec:	e0fff517 	ldw	r3,-44(fp)
101012f0:	e0bff617 	ldw	r2,-40(fp)
101012f4:	1885883a 	add	r2,r3,r2
101012f8:	e0bff515 	stw	r2,-44(fp)
      space -= n;
101012fc:	e0fffe17 	ldw	r3,-8(fp)
10101300:	e0bff617 	ldw	r2,-40(fp)
10101304:	1885c83a 	sub	r2,r3,r2
10101308:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1010130c:	e0fff817 	ldw	r3,-32(fp)
10101310:	e0bff617 	ldw	r2,-40(fp)
10101314:	1885883a 	add	r2,r3,r2
10101318:	10c1ffcc 	andi	r3,r2,2047
1010131c:	e0bffc17 	ldw	r2,-16(fp)
10101320:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
10101324:	e0bffe17 	ldw	r2,-8(fp)
10101328:	00bfcf16 	blt	zero,r2,10101268 <__alt_data_end+0xfffe1268>
1010132c:	00000106 	br	10101334 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
10101330:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
10101334:	e0fff517 	ldw	r3,-44(fp)
10101338:	e0bffd17 	ldw	r2,-12(fp)
1010133c:	1880141e 	bne	r3,r2,10101390 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
10101340:	e0bfff17 	ldw	r2,-4(fp)
10101344:	1090000c 	andi	r2,r2,16384
10101348:	1000131e 	bne	r2,zero,10101398 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
1010134c:	0001883a 	nop
10101350:	e0bffc17 	ldw	r2,-16(fp)
10101354:	10c00a17 	ldw	r3,40(r2)
10101358:	e0bff717 	ldw	r2,-36(fp)
1010135c:	1880051e 	bne	r3,r2,10101374 <altera_avalon_jtag_uart_read+0x138>
10101360:	e0bffc17 	ldw	r2,-16(fp)
10101364:	10c00917 	ldw	r3,36(r2)
10101368:	e0bffc17 	ldw	r2,-16(fp)
1010136c:	10800117 	ldw	r2,4(r2)
10101370:	18bff736 	bltu	r3,r2,10101350 <__alt_data_end+0xfffe1350>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
10101374:	e0bffc17 	ldw	r2,-16(fp)
10101378:	10c00a17 	ldw	r3,40(r2)
1010137c:	e0bff717 	ldw	r2,-36(fp)
10101380:	18800726 	beq	r3,r2,101013a0 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
10101384:	e0bffe17 	ldw	r2,-8(fp)
10101388:	00bfb716 	blt	zero,r2,10101268 <__alt_data_end+0xfffe1268>
1010138c:	00000506 	br	101013a4 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
10101390:	0001883a 	nop
10101394:	00000306 	br	101013a4 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
10101398:	0001883a 	nop
1010139c:	00000106 	br	101013a4 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
101013a0:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
101013a4:	e0fff517 	ldw	r3,-44(fp)
101013a8:	e0bffd17 	ldw	r2,-12(fp)
101013ac:	18801826 	beq	r3,r2,10101410 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
101013b0:	0005303a 	rdctl	r2,status
101013b4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
101013b8:	e0fffb17 	ldw	r3,-20(fp)
101013bc:	00bfff84 	movi	r2,-2
101013c0:	1884703a 	and	r2,r3,r2
101013c4:	1001703a 	wrctl	status,r2
  
  return context;
101013c8:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
101013cc:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
101013d0:	e0bffc17 	ldw	r2,-16(fp)
101013d4:	10800817 	ldw	r2,32(r2)
101013d8:	10c00054 	ori	r3,r2,1
101013dc:	e0bffc17 	ldw	r2,-16(fp)
101013e0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
101013e4:	e0bffc17 	ldw	r2,-16(fp)
101013e8:	10800017 	ldw	r2,0(r2)
101013ec:	10800104 	addi	r2,r2,4
101013f0:	1007883a 	mov	r3,r2
101013f4:	e0bffc17 	ldw	r2,-16(fp)
101013f8:	10800817 	ldw	r2,32(r2)
101013fc:	18800035 	stwio	r2,0(r3)
10101400:	e0bffa17 	ldw	r2,-24(fp)
10101404:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10101408:	e0bff917 	ldw	r2,-28(fp)
1010140c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
10101410:	e0fff517 	ldw	r3,-44(fp)
10101414:	e0bffd17 	ldw	r2,-12(fp)
10101418:	18800426 	beq	r3,r2,1010142c <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
1010141c:	e0fff517 	ldw	r3,-44(fp)
10101420:	e0bffd17 	ldw	r2,-12(fp)
10101424:	1885c83a 	sub	r2,r3,r2
10101428:	00000606 	br	10101444 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
1010142c:	e0bfff17 	ldw	r2,-4(fp)
10101430:	1090000c 	andi	r2,r2,16384
10101434:	10000226 	beq	r2,zero,10101440 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
10101438:	00bffd44 	movi	r2,-11
1010143c:	00000106 	br	10101444 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
10101440:	00bffec4 	movi	r2,-5
}
10101444:	e037883a 	mov	sp,fp
10101448:	dfc00117 	ldw	ra,4(sp)
1010144c:	df000017 	ldw	fp,0(sp)
10101450:	dec00204 	addi	sp,sp,8
10101454:	f800283a 	ret

10101458 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
10101458:	defff304 	addi	sp,sp,-52
1010145c:	dfc00c15 	stw	ra,48(sp)
10101460:	df000b15 	stw	fp,44(sp)
10101464:	df000b04 	addi	fp,sp,44
10101468:	e13ffc15 	stw	r4,-16(fp)
1010146c:	e17ffd15 	stw	r5,-12(fp)
10101470:	e1bffe15 	stw	r6,-8(fp)
10101474:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
10101478:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
1010147c:	e0bffd17 	ldw	r2,-12(fp)
10101480:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
10101484:	00003706 	br	10101564 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
10101488:	e0bffc17 	ldw	r2,-16(fp)
1010148c:	10800c17 	ldw	r2,48(r2)
10101490:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
10101494:	e0bffc17 	ldw	r2,-16(fp)
10101498:	10800d17 	ldw	r2,52(r2)
1010149c:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
101014a0:	e0fff917 	ldw	r3,-28(fp)
101014a4:	e0bff517 	ldw	r2,-44(fp)
101014a8:	1880062e 	bgeu	r3,r2,101014c4 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
101014ac:	e0fff517 	ldw	r3,-44(fp)
101014b0:	e0bff917 	ldw	r2,-28(fp)
101014b4:	1885c83a 	sub	r2,r3,r2
101014b8:	10bfffc4 	addi	r2,r2,-1
101014bc:	e0bff615 	stw	r2,-40(fp)
101014c0:	00000b06 	br	101014f0 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
101014c4:	e0bff517 	ldw	r2,-44(fp)
101014c8:	10000526 	beq	r2,zero,101014e0 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
101014cc:	00c20004 	movi	r3,2048
101014d0:	e0bff917 	ldw	r2,-28(fp)
101014d4:	1885c83a 	sub	r2,r3,r2
101014d8:	e0bff615 	stw	r2,-40(fp)
101014dc:	00000406 	br	101014f0 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
101014e0:	00c1ffc4 	movi	r3,2047
101014e4:	e0bff917 	ldw	r2,-28(fp)
101014e8:	1885c83a 	sub	r2,r3,r2
101014ec:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
101014f0:	e0bff617 	ldw	r2,-40(fp)
101014f4:	10001e26 	beq	r2,zero,10101570 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
101014f8:	e0fffe17 	ldw	r3,-8(fp)
101014fc:	e0bff617 	ldw	r2,-40(fp)
10101500:	1880022e 	bgeu	r3,r2,1010150c <altera_avalon_jtag_uart_write+0xb4>
        n = count;
10101504:	e0bffe17 	ldw	r2,-8(fp)
10101508:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
1010150c:	e0bffc17 	ldw	r2,-16(fp)
10101510:	10c20e04 	addi	r3,r2,2104
10101514:	e0bff917 	ldw	r2,-28(fp)
10101518:	1885883a 	add	r2,r3,r2
1010151c:	e1bff617 	ldw	r6,-40(fp)
10101520:	e17ffd17 	ldw	r5,-12(fp)
10101524:	1009883a 	mov	r4,r2
10101528:	0102c900 	call	10102c90 <memcpy>
      ptr   += n;
1010152c:	e0fffd17 	ldw	r3,-12(fp)
10101530:	e0bff617 	ldw	r2,-40(fp)
10101534:	1885883a 	add	r2,r3,r2
10101538:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
1010153c:	e0fffe17 	ldw	r3,-8(fp)
10101540:	e0bff617 	ldw	r2,-40(fp)
10101544:	1885c83a 	sub	r2,r3,r2
10101548:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1010154c:	e0fff917 	ldw	r3,-28(fp)
10101550:	e0bff617 	ldw	r2,-40(fp)
10101554:	1885883a 	add	r2,r3,r2
10101558:	10c1ffcc 	andi	r3,r2,2047
1010155c:	e0bffc17 	ldw	r2,-16(fp)
10101560:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
10101564:	e0bffe17 	ldw	r2,-8(fp)
10101568:	00bfc716 	blt	zero,r2,10101488 <__alt_data_end+0xfffe1488>
1010156c:	00000106 	br	10101574 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
10101570:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10101574:	0005303a 	rdctl	r2,status
10101578:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1010157c:	e0fffb17 	ldw	r3,-20(fp)
10101580:	00bfff84 	movi	r2,-2
10101584:	1884703a 	and	r2,r3,r2
10101588:	1001703a 	wrctl	status,r2
  
  return context;
1010158c:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
10101590:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
10101594:	e0bffc17 	ldw	r2,-16(fp)
10101598:	10800817 	ldw	r2,32(r2)
1010159c:	10c00094 	ori	r3,r2,2
101015a0:	e0bffc17 	ldw	r2,-16(fp)
101015a4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
101015a8:	e0bffc17 	ldw	r2,-16(fp)
101015ac:	10800017 	ldw	r2,0(r2)
101015b0:	10800104 	addi	r2,r2,4
101015b4:	1007883a 	mov	r3,r2
101015b8:	e0bffc17 	ldw	r2,-16(fp)
101015bc:	10800817 	ldw	r2,32(r2)
101015c0:	18800035 	stwio	r2,0(r3)
101015c4:	e0bffa17 	ldw	r2,-24(fp)
101015c8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
101015cc:	e0bff817 	ldw	r2,-32(fp)
101015d0:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
101015d4:	e0bffe17 	ldw	r2,-8(fp)
101015d8:	0080100e 	bge	zero,r2,1010161c <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
101015dc:	e0bfff17 	ldw	r2,-4(fp)
101015e0:	1090000c 	andi	r2,r2,16384
101015e4:	1000101e 	bne	r2,zero,10101628 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
101015e8:	0001883a 	nop
101015ec:	e0bffc17 	ldw	r2,-16(fp)
101015f0:	10c00d17 	ldw	r3,52(r2)
101015f4:	e0bff517 	ldw	r2,-44(fp)
101015f8:	1880051e 	bne	r3,r2,10101610 <altera_avalon_jtag_uart_write+0x1b8>
101015fc:	e0bffc17 	ldw	r2,-16(fp)
10101600:	10c00917 	ldw	r3,36(r2)
10101604:	e0bffc17 	ldw	r2,-16(fp)
10101608:	10800117 	ldw	r2,4(r2)
1010160c:	18bff736 	bltu	r3,r2,101015ec <__alt_data_end+0xfffe15ec>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
10101610:	e0bffc17 	ldw	r2,-16(fp)
10101614:	10800917 	ldw	r2,36(r2)
10101618:	1000051e 	bne	r2,zero,10101630 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
1010161c:	e0bffe17 	ldw	r2,-8(fp)
10101620:	00bfd016 	blt	zero,r2,10101564 <__alt_data_end+0xfffe1564>
10101624:	00000306 	br	10101634 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
10101628:	0001883a 	nop
1010162c:	00000106 	br	10101634 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
10101630:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
10101634:	e0fffd17 	ldw	r3,-12(fp)
10101638:	e0bff717 	ldw	r2,-36(fp)
1010163c:	18800426 	beq	r3,r2,10101650 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
10101640:	e0fffd17 	ldw	r3,-12(fp)
10101644:	e0bff717 	ldw	r2,-36(fp)
10101648:	1885c83a 	sub	r2,r3,r2
1010164c:	00000606 	br	10101668 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
10101650:	e0bfff17 	ldw	r2,-4(fp)
10101654:	1090000c 	andi	r2,r2,16384
10101658:	10000226 	beq	r2,zero,10101664 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
1010165c:	00bffd44 	movi	r2,-11
10101660:	00000106 	br	10101668 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
10101664:	00bffec4 	movi	r2,-5
}
10101668:	e037883a 	mov	sp,fp
1010166c:	dfc00117 	ldw	ra,4(sp)
10101670:	df000017 	ldw	fp,0(sp)
10101674:	dec00204 	addi	sp,sp,8
10101678:	f800283a 	ret

1010167c <alt_hostfs_open>:
* alt_hostfs_open
*
* If we can't find anything return -1
*/
int alt_hostfs_open(alt_fd* fd, const char * name, int flags, int mode)
{
1010167c:	defff404 	addi	sp,sp,-48
10101680:	df000b15 	stw	fp,44(sp)
10101684:	df000b04 	addi	fp,sp,44
10101688:	e13ffc15 	stw	r4,-16(fp)
1010168c:	e17ffd15 	stw	r5,-12(fp)
10101690:	e1bffe15 	stw	r6,-8(fp)
10101694:	e1ffff15 	stw	r7,-4(fp)
  static const struct HOSTCALL_INFO hcinfo = { 0x0103, "open" };

  alt_hostfs_dev* dev= (alt_hostfs_dev*)fd->dev;
10101698:	e0bffc17 	ldw	r2,-16(fp)
1010169c:	10800017 	ldw	r2,0(r2)
101016a0:	e0bff515 	stw	r2,-44(fp)
#endif

  /* Mount point names don't end with a slash, so we must skip over the
   * slash following the mount point name.
  */
  name += inline_strlen(dev->fs_dev.name) + 1;
101016a4:	e0bff517 	ldw	r2,-44(fp)
101016a8:	10800217 	ldw	r2,8(r2)
101016ac:	e0bff615 	stw	r2,-40(fp)
};

static inline int inline_strlen(const char * string) ALT_ALWAYS_INLINE;
static inline int inline_strlen(const char * string)
{
  const char * ptr = string - 1;
101016b0:	e0bff617 	ldw	r2,-40(fp)
101016b4:	10bfffc4 	addi	r2,r2,-1
101016b8:	e0bffb15 	stw	r2,-20(fp)

  while (*++ptr != 0)
101016bc:	e0bffb17 	ldw	r2,-20(fp)
101016c0:	10800044 	addi	r2,r2,1
101016c4:	e0bffb15 	stw	r2,-20(fp)
101016c8:	e0bffb17 	ldw	r2,-20(fp)
101016cc:	10800003 	ldbu	r2,0(r2)
101016d0:	10803fcc 	andi	r2,r2,255
101016d4:	1080201c 	xori	r2,r2,128
101016d8:	10bfe004 	addi	r2,r2,-128
101016dc:	103ff71e 	bne	r2,zero,101016bc <__alt_data_end+0xfffe16bc>
    ;

  return ptr - string;
101016e0:	e0fffb17 	ldw	r3,-20(fp)
101016e4:	e0bff617 	ldw	r2,-40(fp)
101016e8:	1885c83a 	sub	r2,r3,r2
#endif

  /* Mount point names don't end with a slash, so we must skip over the
   * slash following the mount point name.
  */
  name += inline_strlen(dev->fs_dev.name) + 1;
101016ec:	10800044 	addi	r2,r2,1
101016f0:	1007883a 	mov	r3,r2
101016f4:	e0bffd17 	ldw	r2,-12(fp)
101016f8:	10c5883a 	add	r2,r2,r3
101016fc:	e0bffd15 	stw	r2,-12(fp)

  r3 = (int)&hcinfo;
10101700:	d0a00004 	addi	r2,gp,-32768
10101704:	1007883a 	mov	r3,r2
  r4 = (int)name;
10101708:	e0bffd17 	ldw	r2,-12(fp)
1010170c:	1009883a 	mov	r4,r2
  r5 = flags;
10101710:	e17ffe17 	ldw	r5,-8(fp)
  r6 = mode;
10101714:	e1bfff17 	ldw	r6,-4(fp)
10101718:	e0bffd17 	ldw	r2,-12(fp)
1010171c:	e0bff915 	stw	r2,-28(fp)
};

static inline int inline_strlen(const char * string) ALT_ALWAYS_INLINE;
static inline int inline_strlen(const char * string)
{
  const char * ptr = string - 1;
10101720:	e0bff917 	ldw	r2,-28(fp)
10101724:	10bfffc4 	addi	r2,r2,-1
10101728:	e0bffa15 	stw	r2,-24(fp)

  while (*++ptr != 0)
1010172c:	e0bffa17 	ldw	r2,-24(fp)
10101730:	10800044 	addi	r2,r2,1
10101734:	e0bffa15 	stw	r2,-24(fp)
10101738:	e0bffa17 	ldw	r2,-24(fp)
1010173c:	10800003 	ldbu	r2,0(r2)
10101740:	10803fcc 	andi	r2,r2,255
10101744:	1080201c 	xori	r2,r2,128
10101748:	10bfe004 	addi	r2,r2,-128
1010174c:	103ff71e 	bne	r2,zero,1010172c <__alt_data_end+0xfffe172c>
    ;

  return ptr - string;
10101750:	e1fffa17 	ldw	r7,-24(fp)
10101754:	e0bff917 	ldw	r2,-28(fp)
10101758:	3885c83a 	sub	r2,r7,r2

  r3 = (int)&hcinfo;
  r4 = (int)name;
  r5 = flags;
  r6 = mode;
  r7 = inline_strlen(name);
1010175c:	100f883a 	mov	r7,r2

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5), "r" (r6), "r" (r7) : "memory" );
10101760:	003da07a 	break	1

  handle = (void *)r2;
10101764:	e0bff715 	stw	r2,-36(fp)
  error = r3;
10101768:	e0fff815 	stw	r3,-32(fp)

  if (error == 0)
1010176c:	e0bff817 	ldw	r2,-32(fp)
10101770:	1000031e 	bne	r2,zero,10101780 <alt_hostfs_open+0x104>
    fd->priv = handle;
10101774:	e0bffc17 	ldw	r2,-16(fp)
10101778:	e0fff717 	ldw	r3,-36(fp)
1010177c:	10c00115 	stw	r3,4(r2)

  return -error;
10101780:	e0bff817 	ldw	r2,-32(fp)
10101784:	0085c83a 	sub	r2,zero,r2
}
10101788:	e037883a 	mov	sp,fp
1010178c:	df000017 	ldw	fp,0(sp)
10101790:	dec00104 	addi	sp,sp,4
10101794:	f800283a 	ret

10101798 <alt_hostfs_close>:
* alt_hostfs_close
*
* Read the file
*/
int alt_hostfs_close(alt_fd* fd)
{
10101798:	defffd04 	addi	sp,sp,-12
1010179c:	df000215 	stw	fp,8(sp)
101017a0:	df000204 	addi	fp,sp,8
101017a4:	e13fff15 	stw	r4,-4(fp)

  /* Input and output parameters for the hostcall */
  register int r3 asm ("r3");
  register int r4 asm ("r4");

  r3 = (int)&hcinfo;
101017a8:	d0a00304 	addi	r2,gp,-32756
101017ac:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
101017b0:	e0bfff17 	ldw	r2,-4(fp)
101017b4:	10800117 	ldw	r2,4(r2)
101017b8:	1009883a 	mov	r4,r2

  __asm__ volatile("break 1" : "+r" (r3) : "r" (r4) );
101017bc:	003da07a 	break	1

  error = r3;
101017c0:	e0fffe15 	stw	r3,-8(fp)

  return -error;
101017c4:	e0bffe17 	ldw	r2,-8(fp)
101017c8:	0085c83a 	sub	r2,zero,r2
}
101017cc:	e037883a 	mov	sp,fp
101017d0:	df000017 	ldw	fp,0(sp)
101017d4:	dec00104 	addi	sp,sp,4
101017d8:	f800283a 	ret

101017dc <alt_hostfs_read>:
* alt_hostfs_read
*
* Read the file
*/
int alt_hostfs_read(alt_fd* fd, char * ptr, int len)
{
101017dc:	defffa04 	addi	sp,sp,-24
101017e0:	df000515 	stw	fp,20(sp)
101017e4:	df000504 	addi	fp,sp,20
101017e8:	e13ffd15 	stw	r4,-12(fp)
101017ec:	e17ffe15 	stw	r5,-8(fp)
101017f0:	e1bfff15 	stw	r6,-4(fp)
  register int r4 asm ("r4");
  register int r5 asm ("r5");
  register int r6 asm ("r6");


  r3 = (int)&hcinfo;
101017f4:	d0a00604 	addi	r2,gp,-32744
101017f8:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
101017fc:	e0bffd17 	ldw	r2,-12(fp)
10101800:	10800117 	ldw	r2,4(r2)
10101804:	1009883a 	mov	r4,r2
  r5 = (int)ptr;
10101808:	e0bffe17 	ldw	r2,-8(fp)
1010180c:	100b883a 	mov	r5,r2
  r6 = len;
10101810:	e1bfff17 	ldw	r6,-4(fp)

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5), "r" (r6) : "memory" );
10101814:	003da07a 	break	1

  rc = r2;
10101818:	e0bffb15 	stw	r2,-20(fp)
  error = r3;
1010181c:	e0fffc15 	stw	r3,-16(fp)

  return (error == 0) ? rc : -error;
10101820:	e0bffc17 	ldw	r2,-16(fp)
10101824:	10000326 	beq	r2,zero,10101834 <alt_hostfs_read+0x58>
10101828:	e0bffc17 	ldw	r2,-16(fp)
1010182c:	0085c83a 	sub	r2,zero,r2
10101830:	00000106 	br	10101838 <alt_hostfs_read+0x5c>
10101834:	e0bffb17 	ldw	r2,-20(fp)
}
10101838:	e037883a 	mov	sp,fp
1010183c:	df000017 	ldw	fp,0(sp)
10101840:	dec00104 	addi	sp,sp,4
10101844:	f800283a 	ret

10101848 <alt_hostfs_write>:
* alt_hostfs_write
*
* Read the file
*/
int alt_hostfs_write(alt_fd* fd, const char * ptr, int len)
{
10101848:	defffa04 	addi	sp,sp,-24
1010184c:	df000515 	stw	fp,20(sp)
10101850:	df000504 	addi	fp,sp,20
10101854:	e13ffd15 	stw	r4,-12(fp)
10101858:	e17ffe15 	stw	r5,-8(fp)
1010185c:	e1bfff15 	stw	r6,-4(fp)
  register int r3 asm ("r3");
  register int r4 asm ("r4");
  register int r5 asm ("r5");
  register int r6 asm ("r6");

  r3 = (int)&hcinfo;
10101860:	d0a00904 	addi	r2,gp,-32732
10101864:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
10101868:	e0bffd17 	ldw	r2,-12(fp)
1010186c:	10800117 	ldw	r2,4(r2)
10101870:	1009883a 	mov	r4,r2
  r5 = (int)ptr;
10101874:	e0bffe17 	ldw	r2,-8(fp)
10101878:	100b883a 	mov	r5,r2
  r6 = len;
1010187c:	e1bfff17 	ldw	r6,-4(fp)

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5), "r" (r6) : "memory" );
10101880:	003da07a 	break	1

  rc = r2;
10101884:	e0bffb15 	stw	r2,-20(fp)
  error = r3;
10101888:	e0fffc15 	stw	r3,-16(fp)

  return (error == 0) ? rc : -error;
1010188c:	e0bffc17 	ldw	r2,-16(fp)
10101890:	10000326 	beq	r2,zero,101018a0 <alt_hostfs_write+0x58>
10101894:	e0bffc17 	ldw	r2,-16(fp)
10101898:	0085c83a 	sub	r2,zero,r2
1010189c:	00000106 	br	101018a4 <alt_hostfs_write+0x5c>
101018a0:	e0bffb17 	ldw	r2,-20(fp)
}
101018a4:	e037883a 	mov	sp,fp
101018a8:	df000017 	ldw	fp,0(sp)
101018ac:	dec00104 	addi	sp,sp,4
101018b0:	f800283a 	ret

101018b4 <alt_hostfs_seek>:
* Move around within a file
*
* returns -errno for an error or the offset within the file
*/
int alt_hostfs_seek(alt_fd* fd, int ptr, int dir)
{
101018b4:	defffa04 	addi	sp,sp,-24
101018b8:	df000515 	stw	fp,20(sp)
101018bc:	df000504 	addi	fp,sp,20
101018c0:	e13ffd15 	stw	r4,-12(fp)
101018c4:	e17ffe15 	stw	r5,-8(fp)
101018c8:	e1bfff15 	stw	r6,-4(fp)
  register int r3 asm ("r3");
  register int r4 asm ("r4");
  register int r5 asm ("r5");
  register int r6 asm ("r6");

  r3 = (int)&hcinfo;
101018cc:	d0a00c04 	addi	r2,gp,-32720
101018d0:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
101018d4:	e0bffd17 	ldw	r2,-12(fp)
101018d8:	10800117 	ldw	r2,4(r2)
101018dc:	1009883a 	mov	r4,r2
  r5 = ptr;
101018e0:	e17ffe17 	ldw	r5,-8(fp)
  r6 = dir;
101018e4:	e1bfff17 	ldw	r6,-4(fp)

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5), "r" (r6) : "memory" );
101018e8:	003da07a 	break	1

  rc = r2;
101018ec:	e0bffb15 	stw	r2,-20(fp)
  error = r3;
101018f0:	e0fffc15 	stw	r3,-16(fp)

  return (error == 0) ? rc : -error;
101018f4:	e0bffc17 	ldw	r2,-16(fp)
101018f8:	10000326 	beq	r2,zero,10101908 <alt_hostfs_seek+0x54>
101018fc:	e0bffc17 	ldw	r2,-16(fp)
10101900:	0085c83a 	sub	r2,zero,r2
10101904:	00000106 	br	1010190c <alt_hostfs_seek+0x58>
10101908:	e0bffb17 	ldw	r2,-20(fp)
}
1010190c:	e037883a 	mov	sp,fp
10101910:	df000017 	ldw	fp,0(sp)
10101914:	dec00104 	addi	sp,sp,4
10101918:	f800283a 	ret

1010191c <alt_hostfs_fstat>:
* at the lower address.
* We need to copy the structure and byte swap it to make it match our local
* layout of struct stat.
*/
int alt_hostfs_fstat(alt_fd* fd, struct stat* st)
{
1010191c:	deffe904 	addi	sp,sp,-92
10101920:	df001615 	stw	fp,88(sp)
10101924:	df001604 	addi	fp,sp,88
10101928:	e13ffe15 	stw	r4,-8(fp)
1010192c:	e17fff15 	stw	r5,-4(fp)
  register int r2 asm ("r2");
  register int r3 asm ("r3");
  register int r4 asm ("r4");
  register int r5 asm ("r5");

  r3 = (int)&hcinfo;
10101930:	d0a00f04 	addi	r2,gp,-32708
10101934:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
10101938:	e0bffe17 	ldw	r2,-8(fp)
1010193c:	10800117 	ldw	r2,4(r2)
10101940:	1009883a 	mov	r4,r2
  r5 = (int)&hoststat;
10101944:	e0bfee04 	addi	r2,fp,-72
10101948:	100b883a 	mov	r5,r2

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5) : "memory" );
1010194c:	003da07a 	break	1

  rc = r2;
10101950:	e0bfeb15 	stw	r2,-84(fp)
  error = r3;
10101954:	e0ffec15 	stw	r3,-80(fp)

  if (error == 0)
10101958:	e0bfec17 	ldw	r2,-80(fp)
1010195c:	1000621e 	bne	r2,zero,10101ae8 <alt_hostfs_fstat+0x1cc>
     * no change is required.  On a little-endian processor we need to swap
     * the bytes in each word.
     */

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
10101960:	e0bfee04 	addi	r2,fp,-72
10101964:	e0bfea15 	stw	r2,-88(fp)
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
10101968:	e0bfea17 	ldw	r2,-88(fp)
1010196c:	10801004 	addi	r2,r2,64
10101970:	e0bfed15 	stw	r2,-76(fp)
    for ( ; ptr < end ; ptr++)
10101974:	00001606 	br	101019d0 <alt_hostfs_fstat+0xb4>
      *ptr = ((*ptr & 0xFF000000) >> 24) |
10101978:	e0bfea17 	ldw	r2,-88(fp)
1010197c:	10800017 	ldw	r2,0(r2)
10101980:	1006d63a 	srli	r3,r2,24
             ((*ptr & 0x00FF0000) >> 8)  |
10101984:	e0bfea17 	ldw	r2,-88(fp)
10101988:	10800017 	ldw	r2,0(r2)
1010198c:	10803fec 	andhi	r2,r2,255
10101990:	1004d23a 	srli	r2,r2,8

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
10101994:	1886b03a 	or	r3,r3,r2
             ((*ptr & 0x00FF0000) >> 8)  |
             ((*ptr & 0x0000FF00) << 8)  |
10101998:	e0bfea17 	ldw	r2,-88(fp)
1010199c:	10800017 	ldw	r2,0(r2)
101019a0:	10bfc00c 	andi	r2,r2,65280
101019a4:	1004923a 	slli	r2,r2,8
#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
             ((*ptr & 0x00FF0000) >> 8)  |
101019a8:	1886b03a 	or	r3,r3,r2
             ((*ptr & 0x0000FF00) << 8)  |
             ((*ptr & 0x000000FF) << 24);
101019ac:	e0bfea17 	ldw	r2,-88(fp)
101019b0:	10800017 	ldw	r2,0(r2)
101019b4:	1004963a 	slli	r2,r2,24
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
             ((*ptr & 0x00FF0000) >> 8)  |
             ((*ptr & 0x0000FF00) << 8)  |
101019b8:	1886b03a 	or	r3,r3,r2

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
101019bc:	e0bfea17 	ldw	r2,-88(fp)
101019c0:	10c00015 	stw	r3,0(r2)
     */

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
101019c4:	e0bfea17 	ldw	r2,-88(fp)
101019c8:	10800104 	addi	r2,r2,4
101019cc:	e0bfea15 	stw	r2,-88(fp)
101019d0:	e0ffea17 	ldw	r3,-88(fp)
101019d4:	e0bfed17 	ldw	r2,-76(fp)
101019d8:	18bfe736 	bltu	r3,r2,10101978 <__alt_data_end+0xfffe1978>
             ((*ptr & 0x0000FF00) << 8)  |
             ((*ptr & 0x000000FF) << 24);
#endif

    /* Zero the unused parts of struct stat */
    ptr = (alt_u32 *)st;
101019dc:	e0bfff17 	ldw	r2,-4(fp)
101019e0:	e0bfea15 	stw	r2,-88(fp)
    end = (alt_u32 *)((char *)ptr + sizeof(struct stat));
101019e4:	e0bfea17 	ldw	r2,-88(fp)
101019e8:	10800f04 	addi	r2,r2,60
101019ec:	e0bfed15 	stw	r2,-76(fp)
    for ( ; ptr < end ; ptr++)
101019f0:	00000506 	br	10101a08 <alt_hostfs_fstat+0xec>
      *ptr = 0;
101019f4:	e0bfea17 	ldw	r2,-88(fp)
101019f8:	10000015 	stw	zero,0(r2)
#endif

    /* Zero the unused parts of struct stat */
    ptr = (alt_u32 *)st;
    end = (alt_u32 *)((char *)ptr + sizeof(struct stat));
    for ( ; ptr < end ; ptr++)
101019fc:	e0bfea17 	ldw	r2,-88(fp)
10101a00:	10800104 	addi	r2,r2,4
10101a04:	e0bfea15 	stw	r2,-88(fp)
10101a08:	e0ffea17 	ldw	r3,-88(fp)
10101a0c:	e0bfed17 	ldw	r2,-76(fp)
10101a10:	18bff836 	bltu	r3,r2,101019f4 <__alt_data_end+0xfffe19f4>

    /* Copy the data provided by the host into our local copy, for data which
     * is provided as 64bit values by the host we just use the least
     * significant word.
     */
    st->st_dev     = hoststat.fst_dev;
10101a14:	e0bfee17 	ldw	r2,-72(fp)
10101a18:	1007883a 	mov	r3,r2
10101a1c:	e0bfff17 	ldw	r2,-4(fp)
10101a20:	10c0000d 	sth	r3,0(r2)
    st->st_ino     = hoststat.fst_ino;
10101a24:	e0bfef17 	ldw	r2,-68(fp)
10101a28:	1007883a 	mov	r3,r2
10101a2c:	e0bfff17 	ldw	r2,-4(fp)
10101a30:	10c0008d 	sth	r3,2(r2)
    st->st_mode    = hoststat.fst_mode;
10101a34:	e0fff017 	ldw	r3,-64(fp)
10101a38:	e0bfff17 	ldw	r2,-4(fp)
10101a3c:	10c00115 	stw	r3,4(r2)
    st->st_nlink   = hoststat.fst_nlink;
10101a40:	e0bff117 	ldw	r2,-60(fp)
10101a44:	1007883a 	mov	r3,r2
10101a48:	e0bfff17 	ldw	r2,-4(fp)
10101a4c:	10c0020d 	sth	r3,8(r2)
    st->st_uid     = hoststat.fst_uid;
10101a50:	e0bff217 	ldw	r2,-56(fp)
10101a54:	1007883a 	mov	r3,r2
10101a58:	e0bfff17 	ldw	r2,-4(fp)
10101a5c:	10c0028d 	sth	r3,10(r2)
    st->st_gid     = hoststat.fst_gid;
10101a60:	e0bff317 	ldw	r2,-52(fp)
10101a64:	1007883a 	mov	r3,r2
10101a68:	e0bfff17 	ldw	r2,-4(fp)
10101a6c:	10c0030d 	sth	r3,12(r2)
    st->st_rdev    = hoststat.fst_rdev;
10101a70:	e0bff417 	ldw	r2,-48(fp)
10101a74:	1007883a 	mov	r3,r2
10101a78:	e0bfff17 	ldw	r2,-4(fp)
10101a7c:	10c0038d 	sth	r3,14(r2)
    st->st_size    = hoststat.fst_size[1];
10101a80:	e0bff617 	ldw	r2,-40(fp)
10101a84:	1007883a 	mov	r3,r2
10101a88:	e0bfff17 	ldw	r2,-4(fp)
10101a8c:	10c00415 	stw	r3,16(r2)

    st->st_atime   = hoststat.fst_atime;
10101a90:	e0bffb17 	ldw	r2,-20(fp)
10101a94:	1007883a 	mov	r3,r2
10101a98:	e0bfff17 	ldw	r2,-4(fp)
10101a9c:	10c00515 	stw	r3,20(r2)
    st->st_mtime   = hoststat.fst_mtime;
10101aa0:	e0bffc17 	ldw	r2,-16(fp)
10101aa4:	1007883a 	mov	r3,r2
10101aa8:	e0bfff17 	ldw	r2,-4(fp)
10101aac:	10c00715 	stw	r3,28(r2)
    st->st_ctime   = hoststat.fst_ctime;
10101ab0:	e0bffd17 	ldw	r2,-12(fp)
10101ab4:	1007883a 	mov	r3,r2
10101ab8:	e0bfff17 	ldw	r2,-4(fp)
10101abc:	10c00915 	stw	r3,36(r2)

    st->st_blksize = hoststat.fst_blksize[1];
10101ac0:	e0bff817 	ldw	r2,-32(fp)
10101ac4:	1007883a 	mov	r3,r2
10101ac8:	e0bfff17 	ldw	r2,-4(fp)
10101acc:	10c00b15 	stw	r3,44(r2)
    st->st_blocks  = hoststat.fst_blocks[1];
10101ad0:	e0bffa17 	ldw	r2,-24(fp)
10101ad4:	1007883a 	mov	r3,r2
10101ad8:	e0bfff17 	ldw	r2,-4(fp)
10101adc:	10c00c15 	stw	r3,48(r2)

    return rc;
10101ae0:	e0bfeb17 	ldw	r2,-84(fp)
10101ae4:	00000206 	br	10101af0 <alt_hostfs_fstat+0x1d4>
  }
  else
    return -error;
10101ae8:	e0bfec17 	ldw	r2,-80(fp)
10101aec:	0085c83a 	sub	r2,zero,r2
}
10101af0:	e037883a 	mov	sp,fp
10101af4:	df000017 	ldw	fp,0(sp)
10101af8:	dec00104 	addi	sp,sp,4
10101afc:	f800283a 	ret

10101b00 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
10101b00:	defff504 	addi	sp,sp,-44
10101b04:	df000a15 	stw	fp,40(sp)
10101b08:	df000a04 	addi	fp,sp,40
10101b0c:	e13ffc15 	stw	r4,-16(fp)
10101b10:	e17ffd15 	stw	r5,-12(fp)
10101b14:	e1bffe15 	stw	r6,-8(fp)
10101b18:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
10101b1c:	e03ff615 	stw	zero,-40(fp)
10101b20:	d0a5d317 	ldw	r2,-26804(gp)
  
  if (alt_ticks_per_second ())
10101b24:	10003c26 	beq	r2,zero,10101c18 <alt_alarm_start+0x118>
  {
    if (alarm)
10101b28:	e0bffc17 	ldw	r2,-16(fp)
10101b2c:	10003826 	beq	r2,zero,10101c10 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
10101b30:	e0bffc17 	ldw	r2,-16(fp)
10101b34:	e0fffe17 	ldw	r3,-8(fp)
10101b38:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
10101b3c:	e0bffc17 	ldw	r2,-16(fp)
10101b40:	e0ffff17 	ldw	r3,-4(fp)
10101b44:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10101b48:	0005303a 	rdctl	r2,status
10101b4c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10101b50:	e0fff917 	ldw	r3,-28(fp)
10101b54:	00bfff84 	movi	r2,-2
10101b58:	1884703a 	and	r2,r3,r2
10101b5c:	1001703a 	wrctl	status,r2
  
  return context;
10101b60:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
10101b64:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
10101b68:	d0a5d417 	ldw	r2,-26800(gp)
      
      current_nticks = alt_nticks();
10101b6c:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
10101b70:	e0fffd17 	ldw	r3,-12(fp)
10101b74:	e0bff617 	ldw	r2,-40(fp)
10101b78:	1885883a 	add	r2,r3,r2
10101b7c:	10c00044 	addi	r3,r2,1
10101b80:	e0bffc17 	ldw	r2,-16(fp)
10101b84:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
10101b88:	e0bffc17 	ldw	r2,-16(fp)
10101b8c:	10c00217 	ldw	r3,8(r2)
10101b90:	e0bff617 	ldw	r2,-40(fp)
10101b94:	1880042e 	bgeu	r3,r2,10101ba8 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
10101b98:	e0bffc17 	ldw	r2,-16(fp)
10101b9c:	00c00044 	movi	r3,1
10101ba0:	10c00405 	stb	r3,16(r2)
10101ba4:	00000206 	br	10101bb0 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
10101ba8:	e0bffc17 	ldw	r2,-16(fp)
10101bac:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
10101bb0:	e0bffc17 	ldw	r2,-16(fp)
10101bb4:	d0e01904 	addi	r3,gp,-32668
10101bb8:	e0fffa15 	stw	r3,-24(fp)
10101bbc:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
10101bc0:	e0bffb17 	ldw	r2,-20(fp)
10101bc4:	e0fffa17 	ldw	r3,-24(fp)
10101bc8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
10101bcc:	e0bffa17 	ldw	r2,-24(fp)
10101bd0:	10c00017 	ldw	r3,0(r2)
10101bd4:	e0bffb17 	ldw	r2,-20(fp)
10101bd8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
10101bdc:	e0bffa17 	ldw	r2,-24(fp)
10101be0:	10800017 	ldw	r2,0(r2)
10101be4:	e0fffb17 	ldw	r3,-20(fp)
10101be8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
10101bec:	e0bffa17 	ldw	r2,-24(fp)
10101bf0:	e0fffb17 	ldw	r3,-20(fp)
10101bf4:	10c00015 	stw	r3,0(r2)
10101bf8:	e0bff817 	ldw	r2,-32(fp)
10101bfc:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10101c00:	e0bff717 	ldw	r2,-36(fp)
10101c04:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
10101c08:	0005883a 	mov	r2,zero
10101c0c:	00000306 	br	10101c1c <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
10101c10:	00bffa84 	movi	r2,-22
10101c14:	00000106 	br	10101c1c <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
10101c18:	00bfde84 	movi	r2,-134
  }
}
10101c1c:	e037883a 	mov	sp,fp
10101c20:	df000017 	ldw	fp,0(sp)
10101c24:	dec00104 	addi	sp,sp,4
10101c28:	f800283a 	ret

10101c2c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10101c2c:	defffe04 	addi	sp,sp,-8
10101c30:	dfc00115 	stw	ra,4(sp)
10101c34:	df000015 	stw	fp,0(sp)
10101c38:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10101c3c:	d0a01717 	ldw	r2,-32676(gp)
10101c40:	10000326 	beq	r2,zero,10101c50 <alt_get_errno+0x24>
10101c44:	d0a01717 	ldw	r2,-32676(gp)
10101c48:	103ee83a 	callr	r2
10101c4c:	00000106 	br	10101c54 <alt_get_errno+0x28>
10101c50:	d0a5d604 	addi	r2,gp,-26792
}
10101c54:	e037883a 	mov	sp,fp
10101c58:	dfc00117 	ldw	ra,4(sp)
10101c5c:	df000017 	ldw	fp,0(sp)
10101c60:	dec00204 	addi	sp,sp,8
10101c64:	f800283a 	ret

10101c68 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
10101c68:	defffb04 	addi	sp,sp,-20
10101c6c:	dfc00415 	stw	ra,16(sp)
10101c70:	df000315 	stw	fp,12(sp)
10101c74:	df000304 	addi	fp,sp,12
10101c78:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
10101c7c:	e0bfff17 	ldw	r2,-4(fp)
10101c80:	10000616 	blt	r2,zero,10101c9c <close+0x34>
10101c84:	e0bfff17 	ldw	r2,-4(fp)
10101c88:	10c00324 	muli	r3,r2,12
10101c8c:	00840434 	movhi	r2,4112
10101c90:	10908c04 	addi	r2,r2,16944
10101c94:	1885883a 	add	r2,r3,r2
10101c98:	00000106 	br	10101ca0 <close+0x38>
10101c9c:	0005883a 	mov	r2,zero
10101ca0:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
10101ca4:	e0bffd17 	ldw	r2,-12(fp)
10101ca8:	10001926 	beq	r2,zero,10101d10 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
10101cac:	e0bffd17 	ldw	r2,-12(fp)
10101cb0:	10800017 	ldw	r2,0(r2)
10101cb4:	10800417 	ldw	r2,16(r2)
10101cb8:	10000626 	beq	r2,zero,10101cd4 <close+0x6c>
10101cbc:	e0bffd17 	ldw	r2,-12(fp)
10101cc0:	10800017 	ldw	r2,0(r2)
10101cc4:	10800417 	ldw	r2,16(r2)
10101cc8:	e13ffd17 	ldw	r4,-12(fp)
10101ccc:	103ee83a 	callr	r2
10101cd0:	00000106 	br	10101cd8 <close+0x70>
10101cd4:	0005883a 	mov	r2,zero
10101cd8:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
10101cdc:	e13fff17 	ldw	r4,-4(fp)
10101ce0:	01026340 	call	10102634 <alt_release_fd>
    if (rval < 0)
10101ce4:	e0bffe17 	ldw	r2,-8(fp)
10101ce8:	1000070e 	bge	r2,zero,10101d08 <close+0xa0>
    {
      ALT_ERRNO = -rval;
10101cec:	0101c2c0 	call	10101c2c <alt_get_errno>
10101cf0:	1007883a 	mov	r3,r2
10101cf4:	e0bffe17 	ldw	r2,-8(fp)
10101cf8:	0085c83a 	sub	r2,zero,r2
10101cfc:	18800015 	stw	r2,0(r3)
      return -1;
10101d00:	00bfffc4 	movi	r2,-1
10101d04:	00000706 	br	10101d24 <close+0xbc>
    }
    return 0;
10101d08:	0005883a 	mov	r2,zero
10101d0c:	00000506 	br	10101d24 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
10101d10:	0101c2c0 	call	10101c2c <alt_get_errno>
10101d14:	1007883a 	mov	r3,r2
10101d18:	00801444 	movi	r2,81
10101d1c:	18800015 	stw	r2,0(r3)
    return -1;
10101d20:	00bfffc4 	movi	r2,-1
  }
}
10101d24:	e037883a 	mov	sp,fp
10101d28:	dfc00117 	ldw	ra,4(sp)
10101d2c:	df000017 	ldw	fp,0(sp)
10101d30:	dec00204 	addi	sp,sp,8
10101d34:	f800283a 	ret

10101d38 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
10101d38:	defffe04 	addi	sp,sp,-8
10101d3c:	df000115 	stw	fp,4(sp)
10101d40:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
10101d44:	e03fff15 	stw	zero,-4(fp)
10101d48:	00000506 	br	10101d60 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
10101d4c:	e0bfff17 	ldw	r2,-4(fp)
10101d50:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
10101d54:	e0bfff17 	ldw	r2,-4(fp)
10101d58:	10800804 	addi	r2,r2,32
10101d5c:	e0bfff15 	stw	r2,-4(fp)
10101d60:	e0bfff17 	ldw	r2,-4(fp)
10101d64:	10820030 	cmpltui	r2,r2,2048
10101d68:	103ff81e 	bne	r2,zero,10101d4c <__alt_data_end+0xfffe1d4c>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
10101d6c:	0001883a 	nop
10101d70:	e037883a 	mov	sp,fp
10101d74:	df000017 	ldw	fp,0(sp)
10101d78:	dec00104 	addi	sp,sp,4
10101d7c:	f800283a 	ret

10101d80 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
10101d80:	defffc04 	addi	sp,sp,-16
10101d84:	df000315 	stw	fp,12(sp)
10101d88:	df000304 	addi	fp,sp,12
10101d8c:	e13ffd15 	stw	r4,-12(fp)
10101d90:	e17ffe15 	stw	r5,-8(fp)
10101d94:	e1bfff15 	stw	r6,-4(fp)
  return len;
10101d98:	e0bfff17 	ldw	r2,-4(fp)
}
10101d9c:	e037883a 	mov	sp,fp
10101da0:	df000017 	ldw	fp,0(sp)
10101da4:	dec00104 	addi	sp,sp,4
10101da8:	f800283a 	ret

10101dac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10101dac:	defffe04 	addi	sp,sp,-8
10101db0:	dfc00115 	stw	ra,4(sp)
10101db4:	df000015 	stw	fp,0(sp)
10101db8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10101dbc:	d0a01717 	ldw	r2,-32676(gp)
10101dc0:	10000326 	beq	r2,zero,10101dd0 <alt_get_errno+0x24>
10101dc4:	d0a01717 	ldw	r2,-32676(gp)
10101dc8:	103ee83a 	callr	r2
10101dcc:	00000106 	br	10101dd4 <alt_get_errno+0x28>
10101dd0:	d0a5d604 	addi	r2,gp,-26792
}
10101dd4:	e037883a 	mov	sp,fp
10101dd8:	dfc00117 	ldw	ra,4(sp)
10101ddc:	df000017 	ldw	fp,0(sp)
10101de0:	dec00204 	addi	sp,sp,8
10101de4:	f800283a 	ret

10101de8 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
10101de8:	defffa04 	addi	sp,sp,-24
10101dec:	dfc00515 	stw	ra,20(sp)
10101df0:	df000415 	stw	fp,16(sp)
10101df4:	df000404 	addi	fp,sp,16
10101df8:	e13ffe15 	stw	r4,-8(fp)
10101dfc:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
10101e00:	e0bffe17 	ldw	r2,-8(fp)
10101e04:	10000326 	beq	r2,zero,10101e14 <alt_dev_llist_insert+0x2c>
10101e08:	e0bffe17 	ldw	r2,-8(fp)
10101e0c:	10800217 	ldw	r2,8(r2)
10101e10:	1000061e 	bne	r2,zero,10101e2c <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
10101e14:	0101dac0 	call	10101dac <alt_get_errno>
10101e18:	1007883a 	mov	r3,r2
10101e1c:	00800584 	movi	r2,22
10101e20:	18800015 	stw	r2,0(r3)
    return -EINVAL;
10101e24:	00bffa84 	movi	r2,-22
10101e28:	00001306 	br	10101e78 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
10101e2c:	e0bffe17 	ldw	r2,-8(fp)
10101e30:	e0ffff17 	ldw	r3,-4(fp)
10101e34:	e0fffc15 	stw	r3,-16(fp)
10101e38:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
10101e3c:	e0bffd17 	ldw	r2,-12(fp)
10101e40:	e0fffc17 	ldw	r3,-16(fp)
10101e44:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
10101e48:	e0bffc17 	ldw	r2,-16(fp)
10101e4c:	10c00017 	ldw	r3,0(r2)
10101e50:	e0bffd17 	ldw	r2,-12(fp)
10101e54:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
10101e58:	e0bffc17 	ldw	r2,-16(fp)
10101e5c:	10800017 	ldw	r2,0(r2)
10101e60:	e0fffd17 	ldw	r3,-12(fp)
10101e64:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
10101e68:	e0bffc17 	ldw	r2,-16(fp)
10101e6c:	e0fffd17 	ldw	r3,-12(fp)
10101e70:	10c00015 	stw	r3,0(r2)

  return 0;  
10101e74:	0005883a 	mov	r2,zero
}
10101e78:	e037883a 	mov	sp,fp
10101e7c:	dfc00117 	ldw	ra,4(sp)
10101e80:	df000017 	ldw	fp,0(sp)
10101e84:	dec00204 	addi	sp,sp,8
10101e88:	f800283a 	ret

10101e8c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
10101e8c:	defffd04 	addi	sp,sp,-12
10101e90:	dfc00215 	stw	ra,8(sp)
10101e94:	df000115 	stw	fp,4(sp)
10101e98:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
10101e9c:	00840434 	movhi	r2,4112
10101ea0:	108c4e04 	addi	r2,r2,12600
10101ea4:	e0bfff15 	stw	r2,-4(fp)
10101ea8:	00000606 	br	10101ec4 <_do_ctors+0x38>
        (*ctor) (); 
10101eac:	e0bfff17 	ldw	r2,-4(fp)
10101eb0:	10800017 	ldw	r2,0(r2)
10101eb4:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
10101eb8:	e0bfff17 	ldw	r2,-4(fp)
10101ebc:	10bfff04 	addi	r2,r2,-4
10101ec0:	e0bfff15 	stw	r2,-4(fp)
10101ec4:	e0ffff17 	ldw	r3,-4(fp)
10101ec8:	00840434 	movhi	r2,4112
10101ecc:	108c4f04 	addi	r2,r2,12604
10101ed0:	18bff62e 	bgeu	r3,r2,10101eac <__alt_data_end+0xfffe1eac>
        (*ctor) (); 
}
10101ed4:	0001883a 	nop
10101ed8:	e037883a 	mov	sp,fp
10101edc:	dfc00117 	ldw	ra,4(sp)
10101ee0:	df000017 	ldw	fp,0(sp)
10101ee4:	dec00204 	addi	sp,sp,8
10101ee8:	f800283a 	ret

10101eec <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
10101eec:	defffd04 	addi	sp,sp,-12
10101ef0:	dfc00215 	stw	ra,8(sp)
10101ef4:	df000115 	stw	fp,4(sp)
10101ef8:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
10101efc:	00840434 	movhi	r2,4112
10101f00:	108c4e04 	addi	r2,r2,12600
10101f04:	e0bfff15 	stw	r2,-4(fp)
10101f08:	00000606 	br	10101f24 <_do_dtors+0x38>
        (*dtor) (); 
10101f0c:	e0bfff17 	ldw	r2,-4(fp)
10101f10:	10800017 	ldw	r2,0(r2)
10101f14:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
10101f18:	e0bfff17 	ldw	r2,-4(fp)
10101f1c:	10bfff04 	addi	r2,r2,-4
10101f20:	e0bfff15 	stw	r2,-4(fp)
10101f24:	e0ffff17 	ldw	r3,-4(fp)
10101f28:	00840434 	movhi	r2,4112
10101f2c:	108c4f04 	addi	r2,r2,12604
10101f30:	18bff62e 	bgeu	r3,r2,10101f0c <__alt_data_end+0xfffe1f0c>
        (*dtor) (); 
}
10101f34:	0001883a 	nop
10101f38:	e037883a 	mov	sp,fp
10101f3c:	dfc00117 	ldw	ra,4(sp)
10101f40:	df000017 	ldw	fp,0(sp)
10101f44:	dec00204 	addi	sp,sp,8
10101f48:	f800283a 	ret

10101f4c <alt_fs_reg>:
 * A return value of zero indicates success. A negative return value indicates
 * failure. 
 */
 
int alt_fs_reg (alt_dev* dev)
{
10101f4c:	defffc04 	addi	sp,sp,-16
10101f50:	df000315 	stw	fp,12(sp)
10101f54:	df000304 	addi	fp,sp,12
10101f58:	e13fff15 	stw	r4,-4(fp)
  /*
   * check that the device has a name.
   */

  if (!dev->name)
10101f5c:	e0bfff17 	ldw	r2,-4(fp)
10101f60:	10800217 	ldw	r2,8(r2)
10101f64:	1000021e 	bne	r2,zero,10101f70 <alt_fs_reg+0x24>
  {
    return -ENODEV;
10101f68:	00bffb44 	movi	r2,-19
10101f6c:	00001306 	br	10101fbc <alt_fs_reg+0x70>
  
  /*
   * register the file system.
   */

  alt_llist_insert(&alt_fs_list, &dev->llist);
10101f70:	e0bfff17 	ldw	r2,-4(fp)
10101f74:	d0e01204 	addi	r3,gp,-32696
10101f78:	e0fffd15 	stw	r3,-12(fp)
10101f7c:	e0bffe15 	stw	r2,-8(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
10101f80:	e0bffe17 	ldw	r2,-8(fp)
10101f84:	e0fffd17 	ldw	r3,-12(fp)
10101f88:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
10101f8c:	e0bffd17 	ldw	r2,-12(fp)
10101f90:	10c00017 	ldw	r3,0(r2)
10101f94:	e0bffe17 	ldw	r2,-8(fp)
10101f98:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
10101f9c:	e0bffd17 	ldw	r2,-12(fp)
10101fa0:	10800017 	ldw	r2,0(r2)
10101fa4:	e0fffe17 	ldw	r3,-8(fp)
10101fa8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
10101fac:	e0bffd17 	ldw	r2,-12(fp)
10101fb0:	e0fffe17 	ldw	r3,-8(fp)
10101fb4:	10c00015 	stw	r3,0(r2)

  return 0;
10101fb8:	0005883a 	mov	r2,zero
} 
10101fbc:	e037883a 	mov	sp,fp
10101fc0:	df000017 	ldw	fp,0(sp)
10101fc4:	dec00104 	addi	sp,sp,4
10101fc8:	f800283a 	ret

10101fcc <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
10101fcc:	defffe04 	addi	sp,sp,-8
10101fd0:	dfc00115 	stw	ra,4(sp)
10101fd4:	df000015 	stw	fp,0(sp)
10101fd8:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
10101fdc:	01440004 	movi	r5,4096
10101fe0:	0009883a 	mov	r4,zero
10101fe4:	0102a9c0 	call	10102a9c <alt_icache_flush>
#endif
}
10101fe8:	0001883a 	nop
10101fec:	e037883a 	mov	sp,fp
10101ff0:	dfc00117 	ldw	ra,4(sp)
10101ff4:	df000017 	ldw	fp,0(sp)
10101ff8:	dec00204 	addi	sp,sp,8
10101ffc:	f800283a 	ret

10102000 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
10102000:	defff904 	addi	sp,sp,-28
10102004:	dfc00615 	stw	ra,24(sp)
10102008:	df000515 	stw	fp,20(sp)
1010200c:	df000504 	addi	fp,sp,20
10102010:	e13ffc15 	stw	r4,-16(fp)
10102014:	e17ffd15 	stw	r5,-12(fp)
10102018:	e1bffe15 	stw	r6,-8(fp)
1010201c:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
10102020:	e0800217 	ldw	r2,8(fp)
10102024:	d8800015 	stw	r2,0(sp)
10102028:	e1ffff17 	ldw	r7,-4(fp)
1010202c:	e1bffe17 	ldw	r6,-8(fp)
10102030:	e17ffd17 	ldw	r5,-12(fp)
10102034:	e13ffc17 	ldw	r4,-16(fp)
10102038:	01021b00 	call	101021b0 <alt_iic_isr_register>
}  
1010203c:	e037883a 	mov	sp,fp
10102040:	dfc00117 	ldw	ra,4(sp)
10102044:	df000017 	ldw	fp,0(sp)
10102048:	dec00204 	addi	sp,sp,8
1010204c:	f800283a 	ret

10102050 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
10102050:	defff904 	addi	sp,sp,-28
10102054:	df000615 	stw	fp,24(sp)
10102058:	df000604 	addi	fp,sp,24
1010205c:	e13ffe15 	stw	r4,-8(fp)
10102060:	e17fff15 	stw	r5,-4(fp)
10102064:	e0bfff17 	ldw	r2,-4(fp)
10102068:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1010206c:	0005303a 	rdctl	r2,status
10102070:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10102074:	e0fffb17 	ldw	r3,-20(fp)
10102078:	00bfff84 	movi	r2,-2
1010207c:	1884703a 	and	r2,r3,r2
10102080:	1001703a 	wrctl	status,r2
  
  return context;
10102084:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
10102088:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
1010208c:	00c00044 	movi	r3,1
10102090:	e0bffa17 	ldw	r2,-24(fp)
10102094:	1884983a 	sll	r2,r3,r2
10102098:	1007883a 	mov	r3,r2
1010209c:	d0a5d217 	ldw	r2,-26808(gp)
101020a0:	1884b03a 	or	r2,r3,r2
101020a4:	d0a5d215 	stw	r2,-26808(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
101020a8:	d0a5d217 	ldw	r2,-26808(gp)
101020ac:	100170fa 	wrctl	ienable,r2
101020b0:	e0bffc17 	ldw	r2,-16(fp)
101020b4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
101020b8:	e0bffd17 	ldw	r2,-12(fp)
101020bc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
101020c0:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
101020c4:	0001883a 	nop
}
101020c8:	e037883a 	mov	sp,fp
101020cc:	df000017 	ldw	fp,0(sp)
101020d0:	dec00104 	addi	sp,sp,4
101020d4:	f800283a 	ret

101020d8 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
101020d8:	defff904 	addi	sp,sp,-28
101020dc:	df000615 	stw	fp,24(sp)
101020e0:	df000604 	addi	fp,sp,24
101020e4:	e13ffe15 	stw	r4,-8(fp)
101020e8:	e17fff15 	stw	r5,-4(fp)
101020ec:	e0bfff17 	ldw	r2,-4(fp)
101020f0:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
101020f4:	0005303a 	rdctl	r2,status
101020f8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
101020fc:	e0fffb17 	ldw	r3,-20(fp)
10102100:	00bfff84 	movi	r2,-2
10102104:	1884703a 	and	r2,r3,r2
10102108:	1001703a 	wrctl	status,r2
  
  return context;
1010210c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
10102110:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
10102114:	00c00044 	movi	r3,1
10102118:	e0bffa17 	ldw	r2,-24(fp)
1010211c:	1884983a 	sll	r2,r3,r2
10102120:	0084303a 	nor	r2,zero,r2
10102124:	1007883a 	mov	r3,r2
10102128:	d0a5d217 	ldw	r2,-26808(gp)
1010212c:	1884703a 	and	r2,r3,r2
10102130:	d0a5d215 	stw	r2,-26808(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
10102134:	d0a5d217 	ldw	r2,-26808(gp)
10102138:	100170fa 	wrctl	ienable,r2
1010213c:	e0bffc17 	ldw	r2,-16(fp)
10102140:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10102144:	e0bffd17 	ldw	r2,-12(fp)
10102148:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
1010214c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
10102150:	0001883a 	nop
}
10102154:	e037883a 	mov	sp,fp
10102158:	df000017 	ldw	fp,0(sp)
1010215c:	dec00104 	addi	sp,sp,4
10102160:	f800283a 	ret

10102164 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
10102164:	defffc04 	addi	sp,sp,-16
10102168:	df000315 	stw	fp,12(sp)
1010216c:	df000304 	addi	fp,sp,12
10102170:	e13ffe15 	stw	r4,-8(fp)
10102174:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
10102178:	000530fa 	rdctl	r2,ienable
1010217c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
10102180:	00c00044 	movi	r3,1
10102184:	e0bfff17 	ldw	r2,-4(fp)
10102188:	1884983a 	sll	r2,r3,r2
1010218c:	1007883a 	mov	r3,r2
10102190:	e0bffd17 	ldw	r2,-12(fp)
10102194:	1884703a 	and	r2,r3,r2
10102198:	1004c03a 	cmpne	r2,r2,zero
1010219c:	10803fcc 	andi	r2,r2,255
}
101021a0:	e037883a 	mov	sp,fp
101021a4:	df000017 	ldw	fp,0(sp)
101021a8:	dec00104 	addi	sp,sp,4
101021ac:	f800283a 	ret

101021b0 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
101021b0:	defff504 	addi	sp,sp,-44
101021b4:	dfc00a15 	stw	ra,40(sp)
101021b8:	df000915 	stw	fp,36(sp)
101021bc:	df000904 	addi	fp,sp,36
101021c0:	e13ffc15 	stw	r4,-16(fp)
101021c4:	e17ffd15 	stw	r5,-12(fp)
101021c8:	e1bffe15 	stw	r6,-8(fp)
101021cc:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
101021d0:	00bffa84 	movi	r2,-22
101021d4:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
101021d8:	e0bffd17 	ldw	r2,-12(fp)
101021dc:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
101021e0:	e0bff817 	ldw	r2,-32(fp)
101021e4:	10800808 	cmpgei	r2,r2,32
101021e8:	1000271e 	bne	r2,zero,10102288 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
101021ec:	0005303a 	rdctl	r2,status
101021f0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
101021f4:	e0fffb17 	ldw	r3,-20(fp)
101021f8:	00bfff84 	movi	r2,-2
101021fc:	1884703a 	and	r2,r3,r2
10102200:	1001703a 	wrctl	status,r2
  
  return context;
10102204:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
10102208:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
1010220c:	00840434 	movhi	r2,4112
10102210:	1097cc04 	addi	r2,r2,24368
10102214:	e0fff817 	ldw	r3,-32(fp)
10102218:	180690fa 	slli	r3,r3,3
1010221c:	10c5883a 	add	r2,r2,r3
10102220:	e0fffe17 	ldw	r3,-8(fp)
10102224:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
10102228:	00840434 	movhi	r2,4112
1010222c:	1097cc04 	addi	r2,r2,24368
10102230:	e0fff817 	ldw	r3,-32(fp)
10102234:	180690fa 	slli	r3,r3,3
10102238:	10c5883a 	add	r2,r2,r3
1010223c:	10800104 	addi	r2,r2,4
10102240:	e0ffff17 	ldw	r3,-4(fp)
10102244:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
10102248:	e0bffe17 	ldw	r2,-8(fp)
1010224c:	10000526 	beq	r2,zero,10102264 <alt_iic_isr_register+0xb4>
10102250:	e0bff817 	ldw	r2,-32(fp)
10102254:	100b883a 	mov	r5,r2
10102258:	e13ffc17 	ldw	r4,-16(fp)
1010225c:	01020500 	call	10102050 <alt_ic_irq_enable>
10102260:	00000406 	br	10102274 <alt_iic_isr_register+0xc4>
10102264:	e0bff817 	ldw	r2,-32(fp)
10102268:	100b883a 	mov	r5,r2
1010226c:	e13ffc17 	ldw	r4,-16(fp)
10102270:	01020d80 	call	101020d8 <alt_ic_irq_disable>
10102274:	e0bff715 	stw	r2,-36(fp)
10102278:	e0bffa17 	ldw	r2,-24(fp)
1010227c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10102280:	e0bff917 	ldw	r2,-28(fp)
10102284:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
10102288:	e0bff717 	ldw	r2,-36(fp)
}
1010228c:	e037883a 	mov	sp,fp
10102290:	dfc00117 	ldw	ra,4(sp)
10102294:	df000017 	ldw	fp,0(sp)
10102298:	dec00204 	addi	sp,sp,8
1010229c:	f800283a 	ret

101022a0 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
101022a0:	defff904 	addi	sp,sp,-28
101022a4:	dfc00615 	stw	ra,24(sp)
101022a8:	df000515 	stw	fp,20(sp)
101022ac:	df000504 	addi	fp,sp,20
101022b0:	e13ffc15 	stw	r4,-16(fp)
101022b4:	e17ffd15 	stw	r5,-12(fp)
101022b8:	e1bffe15 	stw	r6,-8(fp)
101022bc:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
101022c0:	e1bfff17 	ldw	r6,-4(fp)
101022c4:	e17ffe17 	ldw	r5,-8(fp)
101022c8:	e13ffd17 	ldw	r4,-12(fp)
101022cc:	01024e00 	call	101024e0 <open>
101022d0:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
101022d4:	e0bffb17 	ldw	r2,-20(fp)
101022d8:	10001c16 	blt	r2,zero,1010234c <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
101022dc:	00840434 	movhi	r2,4112
101022e0:	10908c04 	addi	r2,r2,16944
101022e4:	e0fffb17 	ldw	r3,-20(fp)
101022e8:	18c00324 	muli	r3,r3,12
101022ec:	10c5883a 	add	r2,r2,r3
101022f0:	10c00017 	ldw	r3,0(r2)
101022f4:	e0bffc17 	ldw	r2,-16(fp)
101022f8:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
101022fc:	00840434 	movhi	r2,4112
10102300:	10908c04 	addi	r2,r2,16944
10102304:	e0fffb17 	ldw	r3,-20(fp)
10102308:	18c00324 	muli	r3,r3,12
1010230c:	10c5883a 	add	r2,r2,r3
10102310:	10800104 	addi	r2,r2,4
10102314:	10c00017 	ldw	r3,0(r2)
10102318:	e0bffc17 	ldw	r2,-16(fp)
1010231c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
10102320:	00840434 	movhi	r2,4112
10102324:	10908c04 	addi	r2,r2,16944
10102328:	e0fffb17 	ldw	r3,-20(fp)
1010232c:	18c00324 	muli	r3,r3,12
10102330:	10c5883a 	add	r2,r2,r3
10102334:	10800204 	addi	r2,r2,8
10102338:	10c00017 	ldw	r3,0(r2)
1010233c:	e0bffc17 	ldw	r2,-16(fp)
10102340:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
10102344:	e13ffb17 	ldw	r4,-20(fp)
10102348:	01026340 	call	10102634 <alt_release_fd>
  }
} 
1010234c:	0001883a 	nop
10102350:	e037883a 	mov	sp,fp
10102354:	dfc00117 	ldw	ra,4(sp)
10102358:	df000017 	ldw	fp,0(sp)
1010235c:	dec00204 	addi	sp,sp,8
10102360:	f800283a 	ret

10102364 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
10102364:	defffb04 	addi	sp,sp,-20
10102368:	dfc00415 	stw	ra,16(sp)
1010236c:	df000315 	stw	fp,12(sp)
10102370:	df000304 	addi	fp,sp,12
10102374:	e13ffd15 	stw	r4,-12(fp)
10102378:	e17ffe15 	stw	r5,-8(fp)
1010237c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
10102380:	01c07fc4 	movi	r7,511
10102384:	01800044 	movi	r6,1
10102388:	e17ffd17 	ldw	r5,-12(fp)
1010238c:	01040434 	movhi	r4,4112
10102390:	21108f04 	addi	r4,r4,16956
10102394:	01022a00 	call	101022a0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
10102398:	01c07fc4 	movi	r7,511
1010239c:	000d883a 	mov	r6,zero
101023a0:	e17ffe17 	ldw	r5,-8(fp)
101023a4:	01040434 	movhi	r4,4112
101023a8:	21108c04 	addi	r4,r4,16944
101023ac:	01022a00 	call	101022a0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
101023b0:	01c07fc4 	movi	r7,511
101023b4:	01800044 	movi	r6,1
101023b8:	e17fff17 	ldw	r5,-4(fp)
101023bc:	01040434 	movhi	r4,4112
101023c0:	21109204 	addi	r4,r4,16968
101023c4:	01022a00 	call	101022a0 <alt_open_fd>
}  
101023c8:	0001883a 	nop
101023cc:	e037883a 	mov	sp,fp
101023d0:	dfc00117 	ldw	ra,4(sp)
101023d4:	df000017 	ldw	fp,0(sp)
101023d8:	dec00204 	addi	sp,sp,8
101023dc:	f800283a 	ret

101023e0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
101023e0:	defffe04 	addi	sp,sp,-8
101023e4:	dfc00115 	stw	ra,4(sp)
101023e8:	df000015 	stw	fp,0(sp)
101023ec:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
101023f0:	d0a01717 	ldw	r2,-32676(gp)
101023f4:	10000326 	beq	r2,zero,10102404 <alt_get_errno+0x24>
101023f8:	d0a01717 	ldw	r2,-32676(gp)
101023fc:	103ee83a 	callr	r2
10102400:	00000106 	br	10102408 <alt_get_errno+0x28>
10102404:	d0a5d604 	addi	r2,gp,-26792
}
10102408:	e037883a 	mov	sp,fp
1010240c:	dfc00117 	ldw	ra,4(sp)
10102410:	df000017 	ldw	fp,0(sp)
10102414:	dec00204 	addi	sp,sp,8
10102418:	f800283a 	ret

1010241c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
1010241c:	defffd04 	addi	sp,sp,-12
10102420:	df000215 	stw	fp,8(sp)
10102424:	df000204 	addi	fp,sp,8
10102428:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
1010242c:	e0bfff17 	ldw	r2,-4(fp)
10102430:	10800217 	ldw	r2,8(r2)
10102434:	10d00034 	orhi	r3,r2,16384
10102438:	e0bfff17 	ldw	r2,-4(fp)
1010243c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
10102440:	e03ffe15 	stw	zero,-8(fp)
10102444:	00001d06 	br	101024bc <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
10102448:	00840434 	movhi	r2,4112
1010244c:	10908c04 	addi	r2,r2,16944
10102450:	e0fffe17 	ldw	r3,-8(fp)
10102454:	18c00324 	muli	r3,r3,12
10102458:	10c5883a 	add	r2,r2,r3
1010245c:	10c00017 	ldw	r3,0(r2)
10102460:	e0bfff17 	ldw	r2,-4(fp)
10102464:	10800017 	ldw	r2,0(r2)
10102468:	1880111e 	bne	r3,r2,101024b0 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
1010246c:	00840434 	movhi	r2,4112
10102470:	10908c04 	addi	r2,r2,16944
10102474:	e0fffe17 	ldw	r3,-8(fp)
10102478:	18c00324 	muli	r3,r3,12
1010247c:	10c5883a 	add	r2,r2,r3
10102480:	10800204 	addi	r2,r2,8
10102484:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
10102488:	1000090e 	bge	r2,zero,101024b0 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
1010248c:	e0bffe17 	ldw	r2,-8(fp)
10102490:	10c00324 	muli	r3,r2,12
10102494:	00840434 	movhi	r2,4112
10102498:	10908c04 	addi	r2,r2,16944
1010249c:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
101024a0:	e0bfff17 	ldw	r2,-4(fp)
101024a4:	18800226 	beq	r3,r2,101024b0 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
101024a8:	00bffcc4 	movi	r2,-13
101024ac:	00000806 	br	101024d0 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
101024b0:	e0bffe17 	ldw	r2,-8(fp)
101024b4:	10800044 	addi	r2,r2,1
101024b8:	e0bffe15 	stw	r2,-8(fp)
101024bc:	d0a01617 	ldw	r2,-32680(gp)
101024c0:	1007883a 	mov	r3,r2
101024c4:	e0bffe17 	ldw	r2,-8(fp)
101024c8:	18bfdf2e 	bgeu	r3,r2,10102448 <__alt_data_end+0xfffe2448>
    }
  }
  
  /* The device is not locked */
 
  return 0;
101024cc:	0005883a 	mov	r2,zero
}
101024d0:	e037883a 	mov	sp,fp
101024d4:	df000017 	ldw	fp,0(sp)
101024d8:	dec00104 	addi	sp,sp,4
101024dc:	f800283a 	ret

101024e0 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
101024e0:	defff604 	addi	sp,sp,-40
101024e4:	dfc00915 	stw	ra,36(sp)
101024e8:	df000815 	stw	fp,32(sp)
101024ec:	df000804 	addi	fp,sp,32
101024f0:	e13ffd15 	stw	r4,-12(fp)
101024f4:	e17ffe15 	stw	r5,-8(fp)
101024f8:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
101024fc:	00bfffc4 	movi	r2,-1
10102500:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
10102504:	00bffb44 	movi	r2,-19
10102508:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
1010250c:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
10102510:	d1601404 	addi	r5,gp,-32688
10102514:	e13ffd17 	ldw	r4,-12(fp)
10102518:	01028600 	call	10102860 <alt_find_dev>
1010251c:	e0bff815 	stw	r2,-32(fp)
10102520:	e0bff817 	ldw	r2,-32(fp)
10102524:	1000051e 	bne	r2,zero,1010253c <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
10102528:	e13ffd17 	ldw	r4,-12(fp)
1010252c:	01028f00 	call	101028f0 <alt_find_file>
10102530:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
10102534:	00800044 	movi	r2,1
10102538:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
1010253c:	e0bff817 	ldw	r2,-32(fp)
10102540:	10002926 	beq	r2,zero,101025e8 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
10102544:	e13ff817 	ldw	r4,-32(fp)
10102548:	01029f80 	call	101029f8 <alt_get_fd>
1010254c:	e0bff915 	stw	r2,-28(fp)
10102550:	e0bff917 	ldw	r2,-28(fp)
10102554:	1000030e 	bge	r2,zero,10102564 <open+0x84>
    {
      status = index;
10102558:	e0bff917 	ldw	r2,-28(fp)
1010255c:	e0bffa15 	stw	r2,-24(fp)
10102560:	00002306 	br	101025f0 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
10102564:	e0bff917 	ldw	r2,-28(fp)
10102568:	10c00324 	muli	r3,r2,12
1010256c:	00840434 	movhi	r2,4112
10102570:	10908c04 	addi	r2,r2,16944
10102574:	1885883a 	add	r2,r3,r2
10102578:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
1010257c:	e0fffe17 	ldw	r3,-8(fp)
10102580:	00900034 	movhi	r2,16384
10102584:	10bfffc4 	addi	r2,r2,-1
10102588:	1886703a 	and	r3,r3,r2
1010258c:	e0bffc17 	ldw	r2,-16(fp)
10102590:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
10102594:	e0bffb17 	ldw	r2,-20(fp)
10102598:	1000051e 	bne	r2,zero,101025b0 <open+0xd0>
1010259c:	e13ffc17 	ldw	r4,-16(fp)
101025a0:	010241c0 	call	1010241c <alt_file_locked>
101025a4:	e0bffa15 	stw	r2,-24(fp)
101025a8:	e0bffa17 	ldw	r2,-24(fp)
101025ac:	10001016 	blt	r2,zero,101025f0 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
101025b0:	e0bff817 	ldw	r2,-32(fp)
101025b4:	10800317 	ldw	r2,12(r2)
101025b8:	10000826 	beq	r2,zero,101025dc <open+0xfc>
101025bc:	e0bff817 	ldw	r2,-32(fp)
101025c0:	10800317 	ldw	r2,12(r2)
101025c4:	e1ffff17 	ldw	r7,-4(fp)
101025c8:	e1bffe17 	ldw	r6,-8(fp)
101025cc:	e17ffd17 	ldw	r5,-12(fp)
101025d0:	e13ffc17 	ldw	r4,-16(fp)
101025d4:	103ee83a 	callr	r2
101025d8:	00000106 	br	101025e0 <open+0x100>
101025dc:	0005883a 	mov	r2,zero
101025e0:	e0bffa15 	stw	r2,-24(fp)
101025e4:	00000206 	br	101025f0 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
101025e8:	00bffb44 	movi	r2,-19
101025ec:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
101025f0:	e0bffa17 	ldw	r2,-24(fp)
101025f4:	1000090e 	bge	r2,zero,1010261c <open+0x13c>
  {
    alt_release_fd (index);  
101025f8:	e13ff917 	ldw	r4,-28(fp)
101025fc:	01026340 	call	10102634 <alt_release_fd>
    ALT_ERRNO = -status;
10102600:	01023e00 	call	101023e0 <alt_get_errno>
10102604:	1007883a 	mov	r3,r2
10102608:	e0bffa17 	ldw	r2,-24(fp)
1010260c:	0085c83a 	sub	r2,zero,r2
10102610:	18800015 	stw	r2,0(r3)
    return -1;
10102614:	00bfffc4 	movi	r2,-1
10102618:	00000106 	br	10102620 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
1010261c:	e0bff917 	ldw	r2,-28(fp)
}
10102620:	e037883a 	mov	sp,fp
10102624:	dfc00117 	ldw	ra,4(sp)
10102628:	df000017 	ldw	fp,0(sp)
1010262c:	dec00204 	addi	sp,sp,8
10102630:	f800283a 	ret

10102634 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
10102634:	defffe04 	addi	sp,sp,-8
10102638:	df000115 	stw	fp,4(sp)
1010263c:	df000104 	addi	fp,sp,4
10102640:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
10102644:	e0bfff17 	ldw	r2,-4(fp)
10102648:	108000d0 	cmplti	r2,r2,3
1010264c:	10000d1e 	bne	r2,zero,10102684 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
10102650:	00840434 	movhi	r2,4112
10102654:	10908c04 	addi	r2,r2,16944
10102658:	e0ffff17 	ldw	r3,-4(fp)
1010265c:	18c00324 	muli	r3,r3,12
10102660:	10c5883a 	add	r2,r2,r3
10102664:	10800204 	addi	r2,r2,8
10102668:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
1010266c:	00840434 	movhi	r2,4112
10102670:	10908c04 	addi	r2,r2,16944
10102674:	e0ffff17 	ldw	r3,-4(fp)
10102678:	18c00324 	muli	r3,r3,12
1010267c:	10c5883a 	add	r2,r2,r3
10102680:	10000015 	stw	zero,0(r2)
  }
}
10102684:	0001883a 	nop
10102688:	e037883a 	mov	sp,fp
1010268c:	df000017 	ldw	fp,0(sp)
10102690:	dec00104 	addi	sp,sp,4
10102694:	f800283a 	ret

10102698 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
10102698:	defffa04 	addi	sp,sp,-24
1010269c:	df000515 	stw	fp,20(sp)
101026a0:	df000504 	addi	fp,sp,20
101026a4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
101026a8:	0005303a 	rdctl	r2,status
101026ac:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
101026b0:	e0fffc17 	ldw	r3,-16(fp)
101026b4:	00bfff84 	movi	r2,-2
101026b8:	1884703a 	and	r2,r3,r2
101026bc:	1001703a 	wrctl	status,r2
  
  return context;
101026c0:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
101026c4:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
101026c8:	e0bfff17 	ldw	r2,-4(fp)
101026cc:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
101026d0:	e0bffd17 	ldw	r2,-12(fp)
101026d4:	10800017 	ldw	r2,0(r2)
101026d8:	e0fffd17 	ldw	r3,-12(fp)
101026dc:	18c00117 	ldw	r3,4(r3)
101026e0:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
101026e4:	e0bffd17 	ldw	r2,-12(fp)
101026e8:	10800117 	ldw	r2,4(r2)
101026ec:	e0fffd17 	ldw	r3,-12(fp)
101026f0:	18c00017 	ldw	r3,0(r3)
101026f4:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
101026f8:	e0bffd17 	ldw	r2,-12(fp)
101026fc:	e0fffd17 	ldw	r3,-12(fp)
10102700:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
10102704:	e0bffd17 	ldw	r2,-12(fp)
10102708:	e0fffd17 	ldw	r3,-12(fp)
1010270c:	10c00015 	stw	r3,0(r2)
10102710:	e0bffb17 	ldw	r2,-20(fp)
10102714:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10102718:	e0bffe17 	ldw	r2,-8(fp)
1010271c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
10102720:	0001883a 	nop
10102724:	e037883a 	mov	sp,fp
10102728:	df000017 	ldw	fp,0(sp)
1010272c:	dec00104 	addi	sp,sp,4
10102730:	f800283a 	ret

10102734 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
10102734:	defffb04 	addi	sp,sp,-20
10102738:	dfc00415 	stw	ra,16(sp)
1010273c:	df000315 	stw	fp,12(sp)
10102740:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
10102744:	d0a01917 	ldw	r2,-32668(gp)
10102748:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
1010274c:	d0a5d417 	ldw	r2,-26800(gp)
10102750:	10800044 	addi	r2,r2,1
10102754:	d0a5d415 	stw	r2,-26800(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
10102758:	00002e06 	br	10102814 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
1010275c:	e0bffd17 	ldw	r2,-12(fp)
10102760:	10800017 	ldw	r2,0(r2)
10102764:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
10102768:	e0bffd17 	ldw	r2,-12(fp)
1010276c:	10800403 	ldbu	r2,16(r2)
10102770:	10803fcc 	andi	r2,r2,255
10102774:	10000426 	beq	r2,zero,10102788 <alt_tick+0x54>
10102778:	d0a5d417 	ldw	r2,-26800(gp)
1010277c:	1000021e 	bne	r2,zero,10102788 <alt_tick+0x54>
    {
      alarm->rollover = 0;
10102780:	e0bffd17 	ldw	r2,-12(fp)
10102784:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
10102788:	e0bffd17 	ldw	r2,-12(fp)
1010278c:	10800217 	ldw	r2,8(r2)
10102790:	d0e5d417 	ldw	r3,-26800(gp)
10102794:	18801d36 	bltu	r3,r2,1010280c <alt_tick+0xd8>
10102798:	e0bffd17 	ldw	r2,-12(fp)
1010279c:	10800403 	ldbu	r2,16(r2)
101027a0:	10803fcc 	andi	r2,r2,255
101027a4:	1000191e 	bne	r2,zero,1010280c <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
101027a8:	e0bffd17 	ldw	r2,-12(fp)
101027ac:	10800317 	ldw	r2,12(r2)
101027b0:	e0fffd17 	ldw	r3,-12(fp)
101027b4:	18c00517 	ldw	r3,20(r3)
101027b8:	1809883a 	mov	r4,r3
101027bc:	103ee83a 	callr	r2
101027c0:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
101027c4:	e0bfff17 	ldw	r2,-4(fp)
101027c8:	1000031e 	bne	r2,zero,101027d8 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
101027cc:	e13ffd17 	ldw	r4,-12(fp)
101027d0:	01026980 	call	10102698 <alt_alarm_stop>
101027d4:	00000d06 	br	1010280c <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
101027d8:	e0bffd17 	ldw	r2,-12(fp)
101027dc:	10c00217 	ldw	r3,8(r2)
101027e0:	e0bfff17 	ldw	r2,-4(fp)
101027e4:	1887883a 	add	r3,r3,r2
101027e8:	e0bffd17 	ldw	r2,-12(fp)
101027ec:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
101027f0:	e0bffd17 	ldw	r2,-12(fp)
101027f4:	10c00217 	ldw	r3,8(r2)
101027f8:	d0a5d417 	ldw	r2,-26800(gp)
101027fc:	1880032e 	bgeu	r3,r2,1010280c <alt_tick+0xd8>
        {
          alarm->rollover = 1;
10102800:	e0bffd17 	ldw	r2,-12(fp)
10102804:	00c00044 	movi	r3,1
10102808:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
1010280c:	e0bffe17 	ldw	r2,-8(fp)
10102810:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
10102814:	e0fffd17 	ldw	r3,-12(fp)
10102818:	d0a01904 	addi	r2,gp,-32668
1010281c:	18bfcf1e 	bne	r3,r2,1010275c <__alt_data_end+0xfffe275c>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
10102820:	0001883a 	nop
}
10102824:	0001883a 	nop
10102828:	e037883a 	mov	sp,fp
1010282c:	dfc00117 	ldw	ra,4(sp)
10102830:	df000017 	ldw	fp,0(sp)
10102834:	dec00204 	addi	sp,sp,8
10102838:	f800283a 	ret

1010283c <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
1010283c:	deffff04 	addi	sp,sp,-4
10102840:	df000015 	stw	fp,0(sp)
10102844:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
10102848:	000170fa 	wrctl	ienable,zero
}
1010284c:	0001883a 	nop
10102850:	e037883a 	mov	sp,fp
10102854:	df000017 	ldw	fp,0(sp)
10102858:	dec00104 	addi	sp,sp,4
1010285c:	f800283a 	ret

10102860 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
10102860:	defffa04 	addi	sp,sp,-24
10102864:	dfc00515 	stw	ra,20(sp)
10102868:	df000415 	stw	fp,16(sp)
1010286c:	df000404 	addi	fp,sp,16
10102870:	e13ffe15 	stw	r4,-8(fp)
10102874:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
10102878:	e0bfff17 	ldw	r2,-4(fp)
1010287c:	10800017 	ldw	r2,0(r2)
10102880:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
10102884:	e13ffe17 	ldw	r4,-8(fp)
10102888:	0102dd80 	call	10102dd8 <strlen>
1010288c:	10800044 	addi	r2,r2,1
10102890:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
10102894:	00000d06 	br	101028cc <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
10102898:	e0bffc17 	ldw	r2,-16(fp)
1010289c:	10800217 	ldw	r2,8(r2)
101028a0:	e0fffd17 	ldw	r3,-12(fp)
101028a4:	180d883a 	mov	r6,r3
101028a8:	e17ffe17 	ldw	r5,-8(fp)
101028ac:	1009883a 	mov	r4,r2
101028b0:	0102c140 	call	10102c14 <memcmp>
101028b4:	1000021e 	bne	r2,zero,101028c0 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
101028b8:	e0bffc17 	ldw	r2,-16(fp)
101028bc:	00000706 	br	101028dc <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
101028c0:	e0bffc17 	ldw	r2,-16(fp)
101028c4:	10800017 	ldw	r2,0(r2)
101028c8:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
101028cc:	e0fffc17 	ldw	r3,-16(fp)
101028d0:	e0bfff17 	ldw	r2,-4(fp)
101028d4:	18bff01e 	bne	r3,r2,10102898 <__alt_data_end+0xfffe2898>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
101028d8:	0005883a 	mov	r2,zero
}
101028dc:	e037883a 	mov	sp,fp
101028e0:	dfc00117 	ldw	ra,4(sp)
101028e4:	df000017 	ldw	fp,0(sp)
101028e8:	dec00204 	addi	sp,sp,8
101028ec:	f800283a 	ret

101028f0 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
101028f0:	defffb04 	addi	sp,sp,-20
101028f4:	dfc00415 	stw	ra,16(sp)
101028f8:	df000315 	stw	fp,12(sp)
101028fc:	df000304 	addi	fp,sp,12
10102900:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
10102904:	d0a01217 	ldw	r2,-32696(gp)
10102908:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
1010290c:	00003106 	br	101029d4 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
10102910:	e0bffd17 	ldw	r2,-12(fp)
10102914:	10800217 	ldw	r2,8(r2)
10102918:	1009883a 	mov	r4,r2
1010291c:	0102dd80 	call	10102dd8 <strlen>
10102920:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
10102924:	e0bffd17 	ldw	r2,-12(fp)
10102928:	10c00217 	ldw	r3,8(r2)
1010292c:	e0bffe17 	ldw	r2,-8(fp)
10102930:	10bfffc4 	addi	r2,r2,-1
10102934:	1885883a 	add	r2,r3,r2
10102938:	10800003 	ldbu	r2,0(r2)
1010293c:	10803fcc 	andi	r2,r2,255
10102940:	1080201c 	xori	r2,r2,128
10102944:	10bfe004 	addi	r2,r2,-128
10102948:	10800bd8 	cmpnei	r2,r2,47
1010294c:	1000031e 	bne	r2,zero,1010295c <alt_find_file+0x6c>
    {
      len -= 1;
10102950:	e0bffe17 	ldw	r2,-8(fp)
10102954:	10bfffc4 	addi	r2,r2,-1
10102958:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
1010295c:	e0bffe17 	ldw	r2,-8(fp)
10102960:	e0ffff17 	ldw	r3,-4(fp)
10102964:	1885883a 	add	r2,r3,r2
10102968:	10800003 	ldbu	r2,0(r2)
1010296c:	10803fcc 	andi	r2,r2,255
10102970:	1080201c 	xori	r2,r2,128
10102974:	10bfe004 	addi	r2,r2,-128
10102978:	10800be0 	cmpeqi	r2,r2,47
1010297c:	1000081e 	bne	r2,zero,101029a0 <alt_find_file+0xb0>
10102980:	e0bffe17 	ldw	r2,-8(fp)
10102984:	e0ffff17 	ldw	r3,-4(fp)
10102988:	1885883a 	add	r2,r3,r2
1010298c:	10800003 	ldbu	r2,0(r2)
10102990:	10803fcc 	andi	r2,r2,255
10102994:	1080201c 	xori	r2,r2,128
10102998:	10bfe004 	addi	r2,r2,-128
1010299c:	10000a1e 	bne	r2,zero,101029c8 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
101029a0:	e0bffd17 	ldw	r2,-12(fp)
101029a4:	10800217 	ldw	r2,8(r2)
101029a8:	e0fffe17 	ldw	r3,-8(fp)
101029ac:	180d883a 	mov	r6,r3
101029b0:	e17fff17 	ldw	r5,-4(fp)
101029b4:	1009883a 	mov	r4,r2
101029b8:	0102c140 	call	10102c14 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
101029bc:	1000021e 	bne	r2,zero,101029c8 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
101029c0:	e0bffd17 	ldw	r2,-12(fp)
101029c4:	00000706 	br	101029e4 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
101029c8:	e0bffd17 	ldw	r2,-12(fp)
101029cc:	10800017 	ldw	r2,0(r2)
101029d0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
101029d4:	e0fffd17 	ldw	r3,-12(fp)
101029d8:	d0a01204 	addi	r2,gp,-32696
101029dc:	18bfcc1e 	bne	r3,r2,10102910 <__alt_data_end+0xfffe2910>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
101029e0:	0005883a 	mov	r2,zero
}
101029e4:	e037883a 	mov	sp,fp
101029e8:	dfc00117 	ldw	ra,4(sp)
101029ec:	df000017 	ldw	fp,0(sp)
101029f0:	dec00204 	addi	sp,sp,8
101029f4:	f800283a 	ret

101029f8 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
101029f8:	defffc04 	addi	sp,sp,-16
101029fc:	df000315 	stw	fp,12(sp)
10102a00:	df000304 	addi	fp,sp,12
10102a04:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
10102a08:	00bffa04 	movi	r2,-24
10102a0c:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
10102a10:	e03ffd15 	stw	zero,-12(fp)
10102a14:	00001906 	br	10102a7c <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
10102a18:	00840434 	movhi	r2,4112
10102a1c:	10908c04 	addi	r2,r2,16944
10102a20:	e0fffd17 	ldw	r3,-12(fp)
10102a24:	18c00324 	muli	r3,r3,12
10102a28:	10c5883a 	add	r2,r2,r3
10102a2c:	10800017 	ldw	r2,0(r2)
10102a30:	10000f1e 	bne	r2,zero,10102a70 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
10102a34:	00840434 	movhi	r2,4112
10102a38:	10908c04 	addi	r2,r2,16944
10102a3c:	e0fffd17 	ldw	r3,-12(fp)
10102a40:	18c00324 	muli	r3,r3,12
10102a44:	10c5883a 	add	r2,r2,r3
10102a48:	e0ffff17 	ldw	r3,-4(fp)
10102a4c:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
10102a50:	d0e01617 	ldw	r3,-32680(gp)
10102a54:	e0bffd17 	ldw	r2,-12(fp)
10102a58:	1880020e 	bge	r3,r2,10102a64 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
10102a5c:	e0bffd17 	ldw	r2,-12(fp)
10102a60:	d0a01615 	stw	r2,-32680(gp)
      }
      rc = i;
10102a64:	e0bffd17 	ldw	r2,-12(fp)
10102a68:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
10102a6c:	00000606 	br	10102a88 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
10102a70:	e0bffd17 	ldw	r2,-12(fp)
10102a74:	10800044 	addi	r2,r2,1
10102a78:	e0bffd15 	stw	r2,-12(fp)
10102a7c:	e0bffd17 	ldw	r2,-12(fp)
10102a80:	10800810 	cmplti	r2,r2,32
10102a84:	103fe41e 	bne	r2,zero,10102a18 <__alt_data_end+0xfffe2a18>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
10102a88:	e0bffe17 	ldw	r2,-8(fp)
}
10102a8c:	e037883a 	mov	sp,fp
10102a90:	df000017 	ldw	fp,0(sp)
10102a94:	dec00104 	addi	sp,sp,4
10102a98:	f800283a 	ret

10102a9c <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
10102a9c:	defffb04 	addi	sp,sp,-20
10102aa0:	df000415 	stw	fp,16(sp)
10102aa4:	df000404 	addi	fp,sp,16
10102aa8:	e13ffe15 	stw	r4,-8(fp)
10102aac:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
10102ab0:	e0bfff17 	ldw	r2,-4(fp)
10102ab4:	10840070 	cmpltui	r2,r2,4097
10102ab8:	1000021e 	bne	r2,zero,10102ac4 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
10102abc:	00840004 	movi	r2,4096
10102ac0:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
10102ac4:	e0fffe17 	ldw	r3,-8(fp)
10102ac8:	e0bfff17 	ldw	r2,-4(fp)
10102acc:	1885883a 	add	r2,r3,r2
10102ad0:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
10102ad4:	e0bffe17 	ldw	r2,-8(fp)
10102ad8:	e0bffc15 	stw	r2,-16(fp)
10102adc:	00000506 	br	10102af4 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
10102ae0:	e0bffc17 	ldw	r2,-16(fp)
10102ae4:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
10102ae8:	e0bffc17 	ldw	r2,-16(fp)
10102aec:	10800804 	addi	r2,r2,32
10102af0:	e0bffc15 	stw	r2,-16(fp)
10102af4:	e0fffc17 	ldw	r3,-16(fp)
10102af8:	e0bffd17 	ldw	r2,-12(fp)
10102afc:	18bff836 	bltu	r3,r2,10102ae0 <__alt_data_end+0xfffe2ae0>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
10102b00:	e0bffe17 	ldw	r2,-8(fp)
10102b04:	108007cc 	andi	r2,r2,31
10102b08:	10000226 	beq	r2,zero,10102b14 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
10102b0c:	e0bffc17 	ldw	r2,-16(fp)
10102b10:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
10102b14:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
10102b18:	0001883a 	nop
10102b1c:	e037883a 	mov	sp,fp
10102b20:	df000017 	ldw	fp,0(sp)
10102b24:	dec00104 	addi	sp,sp,4
10102b28:	f800283a 	ret

10102b2c <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
10102b2c:	defffe04 	addi	sp,sp,-8
10102b30:	df000115 	stw	fp,4(sp)
10102b34:	df000104 	addi	fp,sp,4
10102b38:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
10102b3c:	e0bfff17 	ldw	r2,-4(fp)
10102b40:	10bffe84 	addi	r2,r2,-6
10102b44:	10c00428 	cmpgeui	r3,r2,16
10102b48:	18001a1e 	bne	r3,zero,10102bb4 <alt_exception_cause_generated_bad_addr+0x88>
10102b4c:	100690ba 	slli	r3,r2,2
10102b50:	00840434 	movhi	r2,4112
10102b54:	108ad904 	addi	r2,r2,11108
10102b58:	1885883a 	add	r2,r3,r2
10102b5c:	10800017 	ldw	r2,0(r2)
10102b60:	1000683a 	jmp	r2
10102b64:	10102ba4 	muli	zero,r2,16558
10102b68:	10102ba4 	muli	zero,r2,16558
10102b6c:	10102bb4 	orhi	zero,r2,16558
10102b70:	10102bb4 	orhi	zero,r2,16558
10102b74:	10102bb4 	orhi	zero,r2,16558
10102b78:	10102ba4 	muli	zero,r2,16558
10102b7c:	10102bac 	andhi	zero,r2,16558
10102b80:	10102bb4 	orhi	zero,r2,16558
10102b84:	10102ba4 	muli	zero,r2,16558
10102b88:	10102ba4 	muli	zero,r2,16558
10102b8c:	10102bb4 	orhi	zero,r2,16558
10102b90:	10102ba4 	muli	zero,r2,16558
10102b94:	10102bac 	andhi	zero,r2,16558
10102b98:	10102bb4 	orhi	zero,r2,16558
10102b9c:	10102bb4 	orhi	zero,r2,16558
10102ba0:	10102ba4 	muli	zero,r2,16558
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
10102ba4:	00800044 	movi	r2,1
10102ba8:	00000306 	br	10102bb8 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
10102bac:	0005883a 	mov	r2,zero
10102bb0:	00000106 	br	10102bb8 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
10102bb4:	0005883a 	mov	r2,zero
  }
}
10102bb8:	e037883a 	mov	sp,fp
10102bbc:	df000017 	ldw	fp,0(sp)
10102bc0:	dec00104 	addi	sp,sp,4
10102bc4:	f800283a 	ret

10102bc8 <atexit>:
10102bc8:	200b883a 	mov	r5,r4
10102bcc:	000f883a 	mov	r7,zero
10102bd0:	000d883a 	mov	r6,zero
10102bd4:	0009883a 	mov	r4,zero
10102bd8:	0102e701 	jmpi	10102e70 <__register_exitproc>

10102bdc <exit>:
10102bdc:	defffe04 	addi	sp,sp,-8
10102be0:	000b883a 	mov	r5,zero
10102be4:	dc000015 	stw	r16,0(sp)
10102be8:	dfc00115 	stw	ra,4(sp)
10102bec:	2021883a 	mov	r16,r4
10102bf0:	0102f880 	call	10102f88 <__call_exitprocs>
10102bf4:	00840434 	movhi	r2,4112
10102bf8:	10921004 	addi	r2,r2,18496
10102bfc:	11000017 	ldw	r4,0(r2)
10102c00:	20800f17 	ldw	r2,60(r4)
10102c04:	10000126 	beq	r2,zero,10102c0c <exit+0x30>
10102c08:	103ee83a 	callr	r2
10102c0c:	8009883a 	mov	r4,r16
10102c10:	01031080 	call	10103108 <_exit>

10102c14 <memcmp>:
10102c14:	01c000c4 	movi	r7,3
10102c18:	3980192e 	bgeu	r7,r6,10102c80 <memcmp+0x6c>
10102c1c:	2144b03a 	or	r2,r4,r5
10102c20:	11c4703a 	and	r2,r2,r7
10102c24:	10000f26 	beq	r2,zero,10102c64 <memcmp+0x50>
10102c28:	20800003 	ldbu	r2,0(r4)
10102c2c:	28c00003 	ldbu	r3,0(r5)
10102c30:	10c0151e 	bne	r2,r3,10102c88 <memcmp+0x74>
10102c34:	31bfff84 	addi	r6,r6,-2
10102c38:	01ffffc4 	movi	r7,-1
10102c3c:	00000406 	br	10102c50 <memcmp+0x3c>
10102c40:	20800003 	ldbu	r2,0(r4)
10102c44:	28c00003 	ldbu	r3,0(r5)
10102c48:	31bfffc4 	addi	r6,r6,-1
10102c4c:	10c00e1e 	bne	r2,r3,10102c88 <memcmp+0x74>
10102c50:	21000044 	addi	r4,r4,1
10102c54:	29400044 	addi	r5,r5,1
10102c58:	31fff91e 	bne	r6,r7,10102c40 <__alt_data_end+0xfffe2c40>
10102c5c:	0005883a 	mov	r2,zero
10102c60:	f800283a 	ret
10102c64:	20c00017 	ldw	r3,0(r4)
10102c68:	28800017 	ldw	r2,0(r5)
10102c6c:	18bfee1e 	bne	r3,r2,10102c28 <__alt_data_end+0xfffe2c28>
10102c70:	31bfff04 	addi	r6,r6,-4
10102c74:	21000104 	addi	r4,r4,4
10102c78:	29400104 	addi	r5,r5,4
10102c7c:	39bff936 	bltu	r7,r6,10102c64 <__alt_data_end+0xfffe2c64>
10102c80:	303fe91e 	bne	r6,zero,10102c28 <__alt_data_end+0xfffe2c28>
10102c84:	003ff506 	br	10102c5c <__alt_data_end+0xfffe2c5c>
10102c88:	10c5c83a 	sub	r2,r2,r3
10102c8c:	f800283a 	ret

10102c90 <memcpy>:
10102c90:	defffd04 	addi	sp,sp,-12
10102c94:	dfc00215 	stw	ra,8(sp)
10102c98:	dc400115 	stw	r17,4(sp)
10102c9c:	dc000015 	stw	r16,0(sp)
10102ca0:	00c003c4 	movi	r3,15
10102ca4:	2005883a 	mov	r2,r4
10102ca8:	1980452e 	bgeu	r3,r6,10102dc0 <memcpy+0x130>
10102cac:	2906b03a 	or	r3,r5,r4
10102cb0:	18c000cc 	andi	r3,r3,3
10102cb4:	1800441e 	bne	r3,zero,10102dc8 <memcpy+0x138>
10102cb8:	347ffc04 	addi	r17,r6,-16
10102cbc:	8822d13a 	srli	r17,r17,4
10102cc0:	28c00104 	addi	r3,r5,4
10102cc4:	23400104 	addi	r13,r4,4
10102cc8:	8820913a 	slli	r16,r17,4
10102ccc:	2b000204 	addi	r12,r5,8
10102cd0:	22c00204 	addi	r11,r4,8
10102cd4:	84000504 	addi	r16,r16,20
10102cd8:	2a800304 	addi	r10,r5,12
10102cdc:	22400304 	addi	r9,r4,12
10102ce0:	2c21883a 	add	r16,r5,r16
10102ce4:	2811883a 	mov	r8,r5
10102ce8:	200f883a 	mov	r7,r4
10102cec:	41000017 	ldw	r4,0(r8)
10102cf0:	1fc00017 	ldw	ra,0(r3)
10102cf4:	63c00017 	ldw	r15,0(r12)
10102cf8:	39000015 	stw	r4,0(r7)
10102cfc:	53800017 	ldw	r14,0(r10)
10102d00:	6fc00015 	stw	ra,0(r13)
10102d04:	5bc00015 	stw	r15,0(r11)
10102d08:	4b800015 	stw	r14,0(r9)
10102d0c:	18c00404 	addi	r3,r3,16
10102d10:	39c00404 	addi	r7,r7,16
10102d14:	42000404 	addi	r8,r8,16
10102d18:	6b400404 	addi	r13,r13,16
10102d1c:	63000404 	addi	r12,r12,16
10102d20:	5ac00404 	addi	r11,r11,16
10102d24:	52800404 	addi	r10,r10,16
10102d28:	4a400404 	addi	r9,r9,16
10102d2c:	1c3fef1e 	bne	r3,r16,10102cec <__alt_data_end+0xfffe2cec>
10102d30:	89c00044 	addi	r7,r17,1
10102d34:	380e913a 	slli	r7,r7,4
10102d38:	310003cc 	andi	r4,r6,15
10102d3c:	02c000c4 	movi	r11,3
10102d40:	11c7883a 	add	r3,r2,r7
10102d44:	29cb883a 	add	r5,r5,r7
10102d48:	5900212e 	bgeu	r11,r4,10102dd0 <memcpy+0x140>
10102d4c:	1813883a 	mov	r9,r3
10102d50:	2811883a 	mov	r8,r5
10102d54:	200f883a 	mov	r7,r4
10102d58:	42800017 	ldw	r10,0(r8)
10102d5c:	4a400104 	addi	r9,r9,4
10102d60:	39ffff04 	addi	r7,r7,-4
10102d64:	4abfff15 	stw	r10,-4(r9)
10102d68:	42000104 	addi	r8,r8,4
10102d6c:	59fffa36 	bltu	r11,r7,10102d58 <__alt_data_end+0xfffe2d58>
10102d70:	213fff04 	addi	r4,r4,-4
10102d74:	2008d0ba 	srli	r4,r4,2
10102d78:	318000cc 	andi	r6,r6,3
10102d7c:	21000044 	addi	r4,r4,1
10102d80:	2109883a 	add	r4,r4,r4
10102d84:	2109883a 	add	r4,r4,r4
10102d88:	1907883a 	add	r3,r3,r4
10102d8c:	290b883a 	add	r5,r5,r4
10102d90:	30000626 	beq	r6,zero,10102dac <memcpy+0x11c>
10102d94:	198d883a 	add	r6,r3,r6
10102d98:	29c00003 	ldbu	r7,0(r5)
10102d9c:	18c00044 	addi	r3,r3,1
10102da0:	29400044 	addi	r5,r5,1
10102da4:	19ffffc5 	stb	r7,-1(r3)
10102da8:	19bffb1e 	bne	r3,r6,10102d98 <__alt_data_end+0xfffe2d98>
10102dac:	dfc00217 	ldw	ra,8(sp)
10102db0:	dc400117 	ldw	r17,4(sp)
10102db4:	dc000017 	ldw	r16,0(sp)
10102db8:	dec00304 	addi	sp,sp,12
10102dbc:	f800283a 	ret
10102dc0:	2007883a 	mov	r3,r4
10102dc4:	003ff206 	br	10102d90 <__alt_data_end+0xfffe2d90>
10102dc8:	2007883a 	mov	r3,r4
10102dcc:	003ff106 	br	10102d94 <__alt_data_end+0xfffe2d94>
10102dd0:	200d883a 	mov	r6,r4
10102dd4:	003fee06 	br	10102d90 <__alt_data_end+0xfffe2d90>

10102dd8 <strlen>:
10102dd8:	208000cc 	andi	r2,r4,3
10102ddc:	10002026 	beq	r2,zero,10102e60 <strlen+0x88>
10102de0:	20800007 	ldb	r2,0(r4)
10102de4:	10002026 	beq	r2,zero,10102e68 <strlen+0x90>
10102de8:	2005883a 	mov	r2,r4
10102dec:	00000206 	br	10102df8 <strlen+0x20>
10102df0:	10c00007 	ldb	r3,0(r2)
10102df4:	18001826 	beq	r3,zero,10102e58 <strlen+0x80>
10102df8:	10800044 	addi	r2,r2,1
10102dfc:	10c000cc 	andi	r3,r2,3
10102e00:	183ffb1e 	bne	r3,zero,10102df0 <__alt_data_end+0xfffe2df0>
10102e04:	10c00017 	ldw	r3,0(r2)
10102e08:	01ffbff4 	movhi	r7,65279
10102e0c:	39ffbfc4 	addi	r7,r7,-257
10102e10:	00ca303a 	nor	r5,zero,r3
10102e14:	01a02074 	movhi	r6,32897
10102e18:	19c7883a 	add	r3,r3,r7
10102e1c:	31a02004 	addi	r6,r6,-32640
10102e20:	1946703a 	and	r3,r3,r5
10102e24:	1986703a 	and	r3,r3,r6
10102e28:	1800091e 	bne	r3,zero,10102e50 <strlen+0x78>
10102e2c:	10800104 	addi	r2,r2,4
10102e30:	10c00017 	ldw	r3,0(r2)
10102e34:	19cb883a 	add	r5,r3,r7
10102e38:	00c6303a 	nor	r3,zero,r3
10102e3c:	28c6703a 	and	r3,r5,r3
10102e40:	1986703a 	and	r3,r3,r6
10102e44:	183ff926 	beq	r3,zero,10102e2c <__alt_data_end+0xfffe2e2c>
10102e48:	00000106 	br	10102e50 <strlen+0x78>
10102e4c:	10800044 	addi	r2,r2,1
10102e50:	10c00007 	ldb	r3,0(r2)
10102e54:	183ffd1e 	bne	r3,zero,10102e4c <__alt_data_end+0xfffe2e4c>
10102e58:	1105c83a 	sub	r2,r2,r4
10102e5c:	f800283a 	ret
10102e60:	2005883a 	mov	r2,r4
10102e64:	003fe706 	br	10102e04 <__alt_data_end+0xfffe2e04>
10102e68:	0005883a 	mov	r2,zero
10102e6c:	f800283a 	ret

10102e70 <__register_exitproc>:
10102e70:	defffa04 	addi	sp,sp,-24
10102e74:	dc000315 	stw	r16,12(sp)
10102e78:	04040434 	movhi	r16,4112
10102e7c:	84121004 	addi	r16,r16,18496
10102e80:	80c00017 	ldw	r3,0(r16)
10102e84:	dc400415 	stw	r17,16(sp)
10102e88:	dfc00515 	stw	ra,20(sp)
10102e8c:	18805217 	ldw	r2,328(r3)
10102e90:	2023883a 	mov	r17,r4
10102e94:	10003726 	beq	r2,zero,10102f74 <__register_exitproc+0x104>
10102e98:	10c00117 	ldw	r3,4(r2)
10102e9c:	010007c4 	movi	r4,31
10102ea0:	20c00e16 	blt	r4,r3,10102edc <__register_exitproc+0x6c>
10102ea4:	1a000044 	addi	r8,r3,1
10102ea8:	8800221e 	bne	r17,zero,10102f34 <__register_exitproc+0xc4>
10102eac:	18c00084 	addi	r3,r3,2
10102eb0:	18c7883a 	add	r3,r3,r3
10102eb4:	18c7883a 	add	r3,r3,r3
10102eb8:	12000115 	stw	r8,4(r2)
10102ebc:	10c7883a 	add	r3,r2,r3
10102ec0:	19400015 	stw	r5,0(r3)
10102ec4:	0005883a 	mov	r2,zero
10102ec8:	dfc00517 	ldw	ra,20(sp)
10102ecc:	dc400417 	ldw	r17,16(sp)
10102ed0:	dc000317 	ldw	r16,12(sp)
10102ed4:	dec00604 	addi	sp,sp,24
10102ed8:	f800283a 	ret
10102edc:	00800034 	movhi	r2,0
10102ee0:	10800004 	addi	r2,r2,0
10102ee4:	10002626 	beq	r2,zero,10102f80 <__register_exitproc+0x110>
10102ee8:	01006404 	movi	r4,400
10102eec:	d9400015 	stw	r5,0(sp)
10102ef0:	d9800115 	stw	r6,4(sp)
10102ef4:	d9c00215 	stw	r7,8(sp)
10102ef8:	00000000 	call	10000000 <__alt_mem_onchip_memory2_0-0x100000>
10102efc:	d9400017 	ldw	r5,0(sp)
10102f00:	d9800117 	ldw	r6,4(sp)
10102f04:	d9c00217 	ldw	r7,8(sp)
10102f08:	10001d26 	beq	r2,zero,10102f80 <__register_exitproc+0x110>
10102f0c:	81000017 	ldw	r4,0(r16)
10102f10:	10000115 	stw	zero,4(r2)
10102f14:	02000044 	movi	r8,1
10102f18:	22405217 	ldw	r9,328(r4)
10102f1c:	0007883a 	mov	r3,zero
10102f20:	12400015 	stw	r9,0(r2)
10102f24:	20805215 	stw	r2,328(r4)
10102f28:	10006215 	stw	zero,392(r2)
10102f2c:	10006315 	stw	zero,396(r2)
10102f30:	883fde26 	beq	r17,zero,10102eac <__alt_data_end+0xfffe2eac>
10102f34:	18c9883a 	add	r4,r3,r3
10102f38:	2109883a 	add	r4,r4,r4
10102f3c:	1109883a 	add	r4,r2,r4
10102f40:	21802215 	stw	r6,136(r4)
10102f44:	01800044 	movi	r6,1
10102f48:	12406217 	ldw	r9,392(r2)
10102f4c:	30cc983a 	sll	r6,r6,r3
10102f50:	4992b03a 	or	r9,r9,r6
10102f54:	12406215 	stw	r9,392(r2)
10102f58:	21c04215 	stw	r7,264(r4)
10102f5c:	01000084 	movi	r4,2
10102f60:	893fd21e 	bne	r17,r4,10102eac <__alt_data_end+0xfffe2eac>
10102f64:	11006317 	ldw	r4,396(r2)
10102f68:	218cb03a 	or	r6,r4,r6
10102f6c:	11806315 	stw	r6,396(r2)
10102f70:	003fce06 	br	10102eac <__alt_data_end+0xfffe2eac>
10102f74:	18805304 	addi	r2,r3,332
10102f78:	18805215 	stw	r2,328(r3)
10102f7c:	003fc606 	br	10102e98 <__alt_data_end+0xfffe2e98>
10102f80:	00bfffc4 	movi	r2,-1
10102f84:	003fd006 	br	10102ec8 <__alt_data_end+0xfffe2ec8>

10102f88 <__call_exitprocs>:
10102f88:	defff504 	addi	sp,sp,-44
10102f8c:	df000915 	stw	fp,36(sp)
10102f90:	dd400615 	stw	r21,24(sp)
10102f94:	dc800315 	stw	r18,12(sp)
10102f98:	dfc00a15 	stw	ra,40(sp)
10102f9c:	ddc00815 	stw	r23,32(sp)
10102fa0:	dd800715 	stw	r22,28(sp)
10102fa4:	dd000515 	stw	r20,20(sp)
10102fa8:	dcc00415 	stw	r19,16(sp)
10102fac:	dc400215 	stw	r17,8(sp)
10102fb0:	dc000115 	stw	r16,4(sp)
10102fb4:	d9000015 	stw	r4,0(sp)
10102fb8:	2839883a 	mov	fp,r5
10102fbc:	04800044 	movi	r18,1
10102fc0:	057fffc4 	movi	r21,-1
10102fc4:	00840434 	movhi	r2,4112
10102fc8:	10921004 	addi	r2,r2,18496
10102fcc:	12000017 	ldw	r8,0(r2)
10102fd0:	45005217 	ldw	r20,328(r8)
10102fd4:	44c05204 	addi	r19,r8,328
10102fd8:	a0001c26 	beq	r20,zero,1010304c <__call_exitprocs+0xc4>
10102fdc:	a0800117 	ldw	r2,4(r20)
10102fe0:	15ffffc4 	addi	r23,r2,-1
10102fe4:	b8000d16 	blt	r23,zero,1010301c <__call_exitprocs+0x94>
10102fe8:	14000044 	addi	r16,r2,1
10102fec:	8421883a 	add	r16,r16,r16
10102ff0:	8421883a 	add	r16,r16,r16
10102ff4:	84402004 	addi	r17,r16,128
10102ff8:	a463883a 	add	r17,r20,r17
10102ffc:	a421883a 	add	r16,r20,r16
10103000:	e0001e26 	beq	fp,zero,1010307c <__call_exitprocs+0xf4>
10103004:	80804017 	ldw	r2,256(r16)
10103008:	e0801c26 	beq	fp,r2,1010307c <__call_exitprocs+0xf4>
1010300c:	bdffffc4 	addi	r23,r23,-1
10103010:	843fff04 	addi	r16,r16,-4
10103014:	8c7fff04 	addi	r17,r17,-4
10103018:	bd7ff91e 	bne	r23,r21,10103000 <__alt_data_end+0xfffe3000>
1010301c:	00800034 	movhi	r2,0
10103020:	10800004 	addi	r2,r2,0
10103024:	10000926 	beq	r2,zero,1010304c <__call_exitprocs+0xc4>
10103028:	a0800117 	ldw	r2,4(r20)
1010302c:	1000301e 	bne	r2,zero,101030f0 <__call_exitprocs+0x168>
10103030:	a0800017 	ldw	r2,0(r20)
10103034:	10003226 	beq	r2,zero,10103100 <__call_exitprocs+0x178>
10103038:	a009883a 	mov	r4,r20
1010303c:	98800015 	stw	r2,0(r19)
10103040:	00000000 	call	10000000 <__alt_mem_onchip_memory2_0-0x100000>
10103044:	9d000017 	ldw	r20,0(r19)
10103048:	a03fe41e 	bne	r20,zero,10102fdc <__alt_data_end+0xfffe2fdc>
1010304c:	dfc00a17 	ldw	ra,40(sp)
10103050:	df000917 	ldw	fp,36(sp)
10103054:	ddc00817 	ldw	r23,32(sp)
10103058:	dd800717 	ldw	r22,28(sp)
1010305c:	dd400617 	ldw	r21,24(sp)
10103060:	dd000517 	ldw	r20,20(sp)
10103064:	dcc00417 	ldw	r19,16(sp)
10103068:	dc800317 	ldw	r18,12(sp)
1010306c:	dc400217 	ldw	r17,8(sp)
10103070:	dc000117 	ldw	r16,4(sp)
10103074:	dec00b04 	addi	sp,sp,44
10103078:	f800283a 	ret
1010307c:	a0800117 	ldw	r2,4(r20)
10103080:	80c00017 	ldw	r3,0(r16)
10103084:	10bfffc4 	addi	r2,r2,-1
10103088:	15c01426 	beq	r2,r23,101030dc <__call_exitprocs+0x154>
1010308c:	80000015 	stw	zero,0(r16)
10103090:	183fde26 	beq	r3,zero,1010300c <__alt_data_end+0xfffe300c>
10103094:	95c8983a 	sll	r4,r18,r23
10103098:	a0806217 	ldw	r2,392(r20)
1010309c:	a5800117 	ldw	r22,4(r20)
101030a0:	2084703a 	and	r2,r4,r2
101030a4:	10000b26 	beq	r2,zero,101030d4 <__call_exitprocs+0x14c>
101030a8:	a0806317 	ldw	r2,396(r20)
101030ac:	2088703a 	and	r4,r4,r2
101030b0:	20000c1e 	bne	r4,zero,101030e4 <__call_exitprocs+0x15c>
101030b4:	89400017 	ldw	r5,0(r17)
101030b8:	d9000017 	ldw	r4,0(sp)
101030bc:	183ee83a 	callr	r3
101030c0:	a0800117 	ldw	r2,4(r20)
101030c4:	15bfbf1e 	bne	r2,r22,10102fc4 <__alt_data_end+0xfffe2fc4>
101030c8:	98800017 	ldw	r2,0(r19)
101030cc:	153fcf26 	beq	r2,r20,1010300c <__alt_data_end+0xfffe300c>
101030d0:	003fbc06 	br	10102fc4 <__alt_data_end+0xfffe2fc4>
101030d4:	183ee83a 	callr	r3
101030d8:	003ff906 	br	101030c0 <__alt_data_end+0xfffe30c0>
101030dc:	a5c00115 	stw	r23,4(r20)
101030e0:	003feb06 	br	10103090 <__alt_data_end+0xfffe3090>
101030e4:	89000017 	ldw	r4,0(r17)
101030e8:	183ee83a 	callr	r3
101030ec:	003ff406 	br	101030c0 <__alt_data_end+0xfffe30c0>
101030f0:	a0800017 	ldw	r2,0(r20)
101030f4:	a027883a 	mov	r19,r20
101030f8:	1029883a 	mov	r20,r2
101030fc:	003fb606 	br	10102fd8 <__alt_data_end+0xfffe2fd8>
10103100:	0005883a 	mov	r2,zero
10103104:	003ffb06 	br	101030f4 <__alt_data_end+0xfffe30f4>

10103108 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
10103108:	defffd04 	addi	sp,sp,-12
1010310c:	df000215 	stw	fp,8(sp)
10103110:	df000204 	addi	fp,sp,8
10103114:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
10103118:	0001883a 	nop
1010311c:	e0bfff17 	ldw	r2,-4(fp)
10103120:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
10103124:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
10103128:	10000226 	beq	r2,zero,10103134 <_exit+0x2c>
    ALT_SIM_FAIL();
1010312c:	002af070 	cmpltui	zero,zero,43969
10103130:	00000106 	br	10103138 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
10103134:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
10103138:	003fff06 	br	10103138 <__alt_data_end+0xfffe3138>
